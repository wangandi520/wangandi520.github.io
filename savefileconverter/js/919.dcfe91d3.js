"use strict";(self["webpackChunksave_file_converter"]=self["webpackChunksave_file_converter"]||[]).push([[919],{8509:function(e,t,n){n.d(t,{Z:function(){return c}});var a=function(){var e=this,t=e._self._c;return t("b-form-group",{scopedSlots:e._u([{key:"default",fn:function({ariaDescribedby:n}){return[t("b-form-radio-group",{staticClass:"radio-buttons",attrs:{options:e.options,"aria-describedby":n,buttons:"","button-variant":"outline-info"},model:{value:e.valueLocal,callback:function(t){e.valueLocal=t},expression:"valueLocal"}})]}}])})},r=[],o={name:"SegaCdSaveTypeSelector",props:{value:{type:String,default:null},internalMemoryText:{type:String,default:"Internal memory"},ramCartText:{type:String,default:"RAM cartridge"}},model:{prop:"value",event:"change"},computed:{valueLocal:{get(){return this.value},set(e){this.$emit("change",e)}}},watch:{ramCartText:{immediate:!0,handler(e){this.options=[{value:"internal-memory",text:this.internalMemoryText},{value:"ram-cart",text:e}]}}},data(){return{options:null}}},i=o,s=n(1001),l=(0,s.Z)(i,a,r,!1,null,"f325f81e",null),c=l.exports},1165:function(e,t,n){n.d(t,{Z:function(){return O}});var a=n(7327),r=(n(3408),n(4590),n(3462),n(3767),n(8585),n(8696),n(7658),n(7313)),o=n(3313),i=n(8764)["Buffer"];const s=!1,l="BackUpRam Format",c="US-ASCII",u=64,g=new Map([[64,512],[512,1024]]),h=Array.from(g.keys()),f=g.get(h[0])*h[0],d=g.get(h[1])*h[1],w=[0,1],y=0,p=2147483648,v=0,b=4,m=4,E=11,S="US-ASCII",L=15,Z=16,A=10,_="shift-jis",C=26,T=30,k=34,D=0,U=2;function I(e){let t=0;switch(e.byteLength){case f:t=h[0];break;case d:t=h[1];break;default:throw new Error(`Invalid file length of ${e.byteLength}. Cannot infer block size`)}return t}function B(e,t){if(e.byteLength<t*w.length)throw new Error("This does not appear to be a valid Sega Saturn save file: it is not long enough to contain the required reserved blocks");let n=0;while(n<u){try{o.Z.checkMagic(e,n,l,c)}catch(r){break}n+=l.length}if(0===n)throw new Error("This does not appear to be a valid Sega Saturn save file: couldn't find any magic.");if(n<u)throw new Error("This does not appear to be a valid Sega Saturn save file: didn't find enough magic.");const a=new Uint8Array(e);for(let o=t;o<2*t;o+=1)if(0!==a[o])throw new Error("This does not appear to be a valid Sega Saturn save file: the second block is not all 0x00");return t}function F(e,t,n){return e.slice(n*t,(n+1)*t)}function N(e){return o.Z.getFilledArrayBuffer(e,0)}function V(e,t){return Array(t).fill().map(((t,n)=>n+e))}function R(e){let t=N(e),n=0;while(n<t.byteLength)t=o.Z.setMagic(t,n,l,c),n+=l.length;return[t,N(e)]}function x(e,t,n){const a=e.byteLength/t;return{blockSize:t,totalBytes:e.byteLength,totalBlocks:a-w.length,usedBlocks:n.length,freeBlocks:a-n.length-w.length}}function M(e,t){const n=e.byteLength/t,a=[];let l=[],c=w.length;while(c<n){let n=F(e,t,c),u=new Uint8Array(n),g=new DataView(n);if(g.getUint32(y,s)===p){l.push(c);const h=o.Z.readNullTerminatedString(u,m,S,E),f=g.getUint8(L),d=o.Z.readNullTerminatedString(u,Z,_,A),w=g.getUint32(C,s),p=g.getUint32(T,s),U=[];let I=k,B=g.getUint16(I,s),N=0;while(B!==D){if(U.push(B),I+=2,I>=t){n=F(e,t,U[N]),N+=1,u=new Uint8Array(n),g=new DataView(n),I=b;const a=g.getUint32(y,s);if(a!==v)throw new Error(`Found block type 0x${i.from(a).toString("hex")} where there should be a data block that continues a block list`)}B=g.getUint16(I,s)}l=l.concat(U);const V=U.slice(N),R=[n.slice(I+2)].concat(V.map((n=>{const a=F(e,t,n),r=new DataView(a),o=r.getUint32(y,s);if(o!==v)throw new Error(`Found block type 0x${i.from(o).toString("hex")} where there should be a data block`);return a.slice(b)}))),x=o.Z.concatArrayBuffers(R).slice(0,p);a.push({name:h,languageCode:f,language:r.Z.getLanguageString(f),comment:d,dateCode:w,date:r.Z.getDate(w),blockList:U,saveSize:p,rawData:x})}c+=1}const u=x(e,t,l);return{saveFiles:a,volumeInfo:u}}function P(e,t){const n=t-k,a=t-b;let r=0,o=0,i=0;do{const t=(i+1)*U;o=Math.max(e.rawData.byteLength+t-n,0);const s=Math.ceil(o/a);r=s-i,i=s}while(r>0);return i}function G(e,t,n){let a=N(t);a=o.Z.setString(a,m,e.name,S,E),a=o.Z.setString(a,Z,e.comment,_,A);const r=new DataView(a);r.setUint32(y,p,s),r.setUint8(L,e.languageCode),r.setUint32(C,e.dateCode,s),r.setUint32(T,e.rawData.byteLength,s);const i=P(e,t),l=[];let c=0,u=a,g=new DataView(u),h=k;while(c<i)g.setUint16(h,c+n+1,s),h+=U,h>=t&&(l.push(u),u=N(t),g=new DataView(u),g.setUint32(y,v,s),h=b),c+=1;g.setUint16(h,D,s),h+=U;let f=0;while(f<e.rawData.byteLength){h>=t&&(l.push(u),u=N(t),g=new DataView(u),g.setUint32(y,v,s),h=b);const n=Math.min(e.rawData.byteLength,t-h);u=o.Z.setArrayBufferPortion(u,e.rawData,h,f,n),f+=n,h+=n}return l.push(u),l}class O{static createEmptySave(e){return O.createFromSaveFiles([],e).getArrayBuffer()}static isCorrectlyFormatted(e){try{return O.createFromSegaSaturnData(e),!0}catch(t){return!1}}static createWithNewSize(){}static createFromSegaSaturnData(e,t){let n=t;void 0===t&&(n=I(e)),B(e,n);const{saveFiles:a,volumeInfo:r}=M(e,n);return new O(e,a,r)}static createFromSaveFiles(e,t,n){if(void 0===h.find((e=>e===t)))throw new Error(`Cannot create Saturn save file: ${t} bytes is not a valid block size`);let a=w.length;const r=e.map((e=>{const n=G(e,t,a);return a+=n.length,n})).flat();let i=g.get(t);void 0!==n&&(i=n/t);const s=R(t).concat(r);if(s.length>i)throw new Error(`Not enough space to hold all saves. Requires ${r.length} blocks and only has space for ${i-w.length} blocks`);const l=V(w.length,r.length);while(s.length<i)s.push(N(t));const c=o.Z.concatArrayBuffers(s),u=x(c,t,l);return new O(c,e,u)}constructor(e,t,n){this.arrayBuffer=e,this.saveFiles=t,this.volumeInfo=n}getSaveFiles(){return this.saveFiles}getVolumeInfo(){return this.volumeInfo}getArrayBuffer(){return this.arrayBuffer}}(0,a.Z)(O,"INTERNAL_BLOCK_SIZE",h[0]),(0,a.Z)(O,"CARTRIDGE_BLOCK_SIZE",h[1]),(0,a.Z)(O,"INTERNAL_SAVE_SIZE",f),(0,a.Z)(O,"CARTRIDGE_SAVE_SIZE",d),(0,a.Z)(O,"ARCHIVE_ENTRY_NAME_LENGTH",E),(0,a.Z)(O,"ARCHIVE_ENTRY_NAME_ENCODING",S),(0,a.Z)(O,"ARCHIVE_ENTRY_COMMENT_LENGTH",A),(0,a.Z)(O,"ARCHIVE_ENTRY_COMMENT_ENCODING",_)},7313:function(e,t,n){n.d(t,{Z:function(){return l}});const a=new Map([[0,"Japanese"],[1,"English"],[2,"French"],[3,"German"],[4,"Spanish"],[5,"Italian"]]),r="Unknown",o=255,i=Array.from(a.keys()),s=3155292e5;class l{static getLanguageString(e){return a.has(e)?a.get(e):r}static getLanguageCode(e){const t=i.find((t=>a.get(t)===e));return void 0===t?o:t}static getDate(e){return new Date(60*e*1e3+s)}static getDateCode(e){return(e.valueOf()-s)/1e3/60}}},4230:function(e,t,n){n.d(t,{Z:function(){return s}});var a=n(7327),r=n(2976);const o=!1,i=512;class s{static isEepromSave(e){return e.byteLength<i}static isByteExpanded(e){const t=new DataView(e);for(let n=0;n<e.byteLength/2;n+=1){const e=t.getUint8(2*n),a=t.getUint8(2*n+1);if(e!==a&&0!==e&&255!==e)return!1}return!0}static isEmpty(e){const t=new DataView(e);for(let n=0;n<e.byteLength;n+=1){const e=t.getUint8(n);if(0!==e&&255!==e)return!1}return!0}static byteExpand(e,t){const n=new ArrayBuffer(2*e.byteLength),a=new DataView(e),r=new DataView(n),i=t===s.FILL_BYTE_REPEAT;for(let s=0;s<a.byteLength;s+=1){const e=a.getUint8(s),n=i?e:t,l=(255&n)<<8|e;r.setUint16(2*s,l,o)}return n}static byteCollapse(e){const t=new ArrayBuffer(e.byteLength/2),n=new DataView(e),a=new DataView(t);for(let r=0;r<e.byteLength/2;r+=1){const e=n.getUint8(2*r+1);a.setUint8(r,e)}return t}static changeFillByte(e,t){if(s.isEepromSave(e))return e;const n=r.Z.getPadFromEndValueAndCount(e),a=t!==s.FILL_BYTE_REPEAT&&n.value!==t,o=r.Z.removePaddingFromEnd(e,n.count);let i=o;s.isByteExpanded(o)&&(i=s.byteCollapse(o));let l=s.byteExpand(i,t);return l=a?r.Z.addPaddingToEnd(l,{value:t,count:n.count}):r.Z.addPaddingToEnd(l,{value:n.value,count:n.count}),l}}(0,a.Z)(s,"FILL_BYTE_REPEAT","repeat")}}]);