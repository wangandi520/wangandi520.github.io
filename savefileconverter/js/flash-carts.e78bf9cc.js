"use strict";(self["webpackChunksave_file_converter"]=self["webpackChunksave_file_converter"]||[]).push([[240],{5482:function(e,t,r){r.d(t,{Z:function(){return o}});var a=function(){var e=this,t=e._self._c;return t("div",[t("mq-layout",{attrs:{mq:this.horizontalLayout}},[t("b-form-group",{staticClass:"horizontal-arrangement",scopedSlots:e._u([{key:"default",fn:function({ariaDescribedby:r}){return[t("b-form-radio-group",{attrs:{options:e.optionsHorizontal,"aria-describedby":r,"button-variant":"outline-info",stacked:"",buttons:""},on:{change:function(t){return e.onChange(t)}},model:{value:e.conversionDirectionInternal,callback:function(t){e.conversionDirectionInternal=t},expression:"conversionDirectionInternal"}})]}}])})],1),t("mq-layout",{attrs:{mq:this.verticalLayout}},[t("b-form-group",{staticClass:"vertical-arrangement",scopedSlots:e._u([{key:"default",fn:function({ariaDescribedby:r}){return[t("b-form-radio-group",{attrs:{options:e.optionsVertical,"aria-describedby":r,"button-variant":"outline-info",buttons:""},on:{change:function(t){return e.onChange(t)}},model:{value:e.conversionDirectionInternal,callback:function(t){e.conversionDirectionInternal=t},expression:"conversionDirectionInternal"}})]}}])})],1)],1)},s=[],n={props:{horizontalLayout:Array,verticalLayout:Array,conversionDirection:String,disableDirection:{type:String,default:null}},data(){return{conversionDirectionInternal:this.conversionDirection,optionsHorizontal:[{html:'<i class="fa fa-arrow-circle-right fa-3x"></i>',value:"convertToRaw",disabled:"convertToRaw"===this.disableDirection},{html:'<i class="fa fa-arrow-circle-left fa-3x"></i>',value:"convertToFormat",disabled:"convertToFormat"===this.disableDirection}],optionsVertical:[{html:'<i class="fa fa-arrow-circle-down fa-3x"></i>',value:"convertToRaw",disabled:"convertToRaw"===this.disableDirection},{html:'<i class="fa fa-arrow-circle-up fa-3x"></i>',value:"convertToFormat",disabled:"convertToFormat"===this.disableDirection}]}},methods:{onChange(e){this.$emit("change",e)}}},i=n,l=r(1001),u=(0,l.Z)(i,a,s,!1,null,"d1ddfc22",null),o=u.exports},2405:function(e,t,r){r.d(t,{Z:function(){return c}});var a=function(){var e=this,t=e._self._c;return t("b-row",{attrs:{"no-gutters":"","align-h":"start","align-v":"center"}},[t("b-col",{attrs:{cols:this.leaveRoomForHelpIcon?11:12,sm:"12"}},[t("div",[t("b-form-input",{attrs:{value:e.value,placeholder:"Output filename",disabled:this.disabled},on:{input:function(t){return e.$emit("input",t)}}}),null!==this.helpText?t("div",[t("help-button",{staticClass:"help-button",attrs:{"popover-text":this.helpText,id:this.id}})],1):e._e()],1)])],1)},s=[],n=r(7900),i={name:"OutputFilename",components:{HelpButton:n.Z},props:{value:{type:String,default:""},disabled:{type:Boolean,default:!1},id:{type:String,default:null},leaveRoomForHelpIcon:{type:Boolean,default:!1},helpText:{type:String,default:null}},data(){return{}}},l=i,u=r(1001),o=(0,u.Z)(l,a,s,!1,null,"25a53d2c",null),c=o.exports},8509:function(e,t,r){r.d(t,{Z:function(){return o}});var a=function(){var e=this,t=e._self._c;return t("b-form-group",{scopedSlots:e._u([{key:"default",fn:function({ariaDescribedby:r}){return[t("b-form-radio-group",{staticClass:"radio-buttons",attrs:{options:e.options,"aria-describedby":r,buttons:"","button-variant":"outline-info"},model:{value:e.valueLocal,callback:function(t){e.valueLocal=t},expression:"valueLocal"}})]}}])})},s=[],n={name:"SegaCdSaveTypeSelector",props:{value:{type:String,default:null},internalMemoryText:{type:String,default:"Internal memory"},ramCartText:{type:String,default:"RAM cartridge"}},model:{prop:"value",event:"change"},computed:{valueLocal:{get(){return this.value},set(e){this.$emit("change",e)}}},watch:{ramCartText:{immediate:!0,handler(e){this.options=[{value:"internal-memory",text:this.internalMemoryText},{value:"ram-cart",text:e}]}}},data(){return{options:null}}},i=n,l=r(1001),u=(0,l.Z)(i,a,s,!1,null,"f325f81e",null),o=u.exports},3374:function(e,t,r){r.r(t),r.d(t,{default:function(){return Ua}});var a=function(){var e=this,t=e._self._c;return t("div",{staticClass:"home"},[t("ConvertFlashCarts")],1)},s=[],n=function(){var e=this,t=e._self._c;return t("div",[t("b-container",[t("b-row",{attrs:{"no-gutters":"","align-h":"center","align-v":"start"}},[t("b-col",{attrs:{sm:"12",md:"5","align-self":"start"}},[t("b-row",{attrs:{"no-gutters":"","align-h":"center","align-v":"start"}},[t("b-col",{attrs:{cols:"12"}},[t("b-jumbotron",{attrs:{fluid:"","header-level":e._f("mq")(e.$mq,{xs:5,sm:5,md:5,lg:5,xl:4})},scopedSlots:e._u([{key:"header",fn:function(){return[e._v("Flash"+e._s("Â ")+"cartridge")]},proxy:!0}])})],1)],1),"convertToRaw"===this.conversionDirection?t("div",[t("input-file",{attrs:{errorMessage:this.errorMessage,placeholderText:"Choose a file to convert",leaveRoomForHelpIcon:!1},on:{load:function(t){return e.readFlashCartSaveData(t)}}}),t("flash-cart-type",{attrs:{id:"flash-cart-type",disabled:!1},on:{input:function(t){return e.flashCartTypeChanged()}},model:{value:e.flashCartType,callback:function(t){e.flashCartType=t},expression:"flashCartType"}}),this.isSegaCdWithTwoOutputFiles?t("div",[t("sega-cd-save-type-selector",{attrs:{value:this.segaCdSaveType},on:{change:function(t){return e.changeSegaCdSaveType(t)}}})],1):e._e(),this.romIsRequired?t("div",[t("input-file",{attrs:{id:"choose-raw-file-rom",errorMessage:null,placeholderText:`Choose the ROM for this file ${e.getFileExtensionsString(this.flashCartTypeClass.requiresRom().clazz)}`,helpText:"These save files require some information from the corresponding ROM.\n              All processing by this website is done on your local machine, and your ROMs are not sent anywhere.",acceptExtension:this.flashCartTypeClass.requiresRom().clazz.getFileExtensions().join(","),leaveRoomForHelpIcon:!0},on:{load:function(t){return e.readRomData(t)}}})],1):e._e()],1):t("div",[t("output-filename",{attrs:{leaveRoomForHelpIcon:!1},model:{value:e.outputFilename,callback:function(t){e.outputFilename=t},expression:"outputFilename"}}),this.displayOutputFileSize?t("div",[t("output-filesize",{attrs:{id:"output-filesize",platform:this.flashCartTypeClass.adjustOutputSizesPlatform()},model:{value:e.outputFilesize,callback:function(t){e.outputFilesize=t},expression:"outputFilesize"}})],1):e._e()],1)],1),t("b-col",{attrs:{sm:"12",md:"2",lg:"2",xl:"2","align-self":"start"}},[t("conversion-direction",{attrs:{horizontalLayout:["md","lg","xl"],verticalLayout:["xs","sm"],conversionDirection:this.conversionDirection},on:{change:function(t){return e.changeConversionDirection(t)}}})],1),t("b-col",{attrs:{sm:"12",md:"5","align-self":"start"}},[t("b-row",{attrs:{"no-gutters":"","align-h":"center","align-v":"start"}},[t("b-col",{attrs:{cols:"12"}},[t("b-jumbotron",{attrs:{fluid:"","header-level":e._f("mq")(e.$mq,{xs:5,sm:5,md:5,lg:5,xl:4})},scopedSlots:e._u([{key:"header",fn:function(){return[e._v("Emulator/Raw")]},proxy:!0}])})],1)],1),"convertToRaw"===this.conversionDirection?t("div",[t("output-filename",{attrs:{leaveRoomForHelpIcon:!1},model:{value:e.outputFilename,callback:function(t){e.outputFilename=t},expression:"outputFilename"}}),this.isSegaCdWithOneOutputFile?t("div",[t("sega-cd-save-type-selector",{attrs:{value:this.segaCdSaveType},on:{change:function(t){return e.changeSegaCdSaveType(t)}}})],1):e._e(),this.displayOutputFileSize?t("div",[t("output-filesize",{attrs:{id:"output-filesize",platform:this.flashCartTypeClass.adjustOutputSizesPlatform()},model:{value:e.outputFilesize,callback:function(t){e.outputFilesize=t},expression:"outputFilesize"}})],1):e._e()],1):t("div",[this.isSegaCdWithOneOutputFile?t("div",[t("input-file",{ref:"inputFileSegaCdInternalMemory",attrs:{errorMessage:this.errorMessage,placeholderText:"Choose an internal memory save file to convert",leaveRoomForHelpIcon:!1},on:{load:function(t){return e.readEmulatorSaveData(t,"rawInternalSaveArrayBuffer")}}}),t("input-file",{ref:"inputFileSegaCdRamCart",attrs:{errorMessage:this.errorMessage,placeholderText:"Choose a RAM cartridge save file to convert",leaveRoomForHelpIcon:!1},on:{load:function(t){return e.readEmulatorSaveData(t,"rawRamCartSaveArrayBuffer")}}})],1):t("div",[t("input-file",{ref:"inputFileEmulator",attrs:{errorMessage:this.errorMessage,placeholderText:"Choose a file to convert",leaveRoomForHelpIcon:!1},on:{load:function(t){return e.readEmulatorSaveData(t)}}})],1),t("flash-cart-type",{attrs:{id:"flash-cart-type",disabled:!1},on:{input:function(t){return e.flashCartTypeChanged()}},model:{value:e.flashCartType,callback:function(t){e.flashCartType=t},expression:"flashCartType"}}),this.isSegaCdWithTwoOutputFiles?t("div",[t("sega-cd-save-type-selector",{attrs:{value:this.segaCdSaveType},on:{change:function(t){return e.changeSegaCdSaveType(t)}}})],1):e._e(),this.romIsRequired?t("div",[t("input-file",{attrs:{id:"choose-raw-file-rom",errorMessage:null,placeholderText:`Choose the ROM for this file ${e.getFileExtensionsString(this.flashCartTypeClass.requiresRom().clazz)}`,helpText:"These save files require some information from the corresponding ROM.\n              All processing by this website is done on your local machine, and your ROMs are not sent anywhere.",acceptExtension:this.flashCartTypeClass.requiresRom().clazz.getFileExtensions().join(","),leaveRoomForHelpIcon:!0},on:{load:function(t){return e.readRomData(t)}}})],1):e._e()],1)],1)],1),t("b-row",{staticClass:"justify-content-md-center",attrs:{"align-h":"center"}},[t("b-col",{attrs:{cols:"auto",sm:"4",md:"3",lg:"2","align-self":"center"}},[t("b-button",{staticClass:"flash-cart-convert-button",attrs:{variant:"success",block:"",disabled:!this.flashCartSaveData||!this.flashCartType||!e.outputFilename},on:{click:function(t){return e.convertFile()}}},[e._v(" Convert! ")])],1)],1),t("b-row",[t("b-col",[t("div",{staticClass:"help"},[e._v(" Before copying a save file to or from a flash cart, please launch a different game first."),t("br"),e._v(" Please see your flash cart documentation for more details, or check #faqs on the "),t("router-link",{attrs:{to:"/about"}},[e._v("Discord")]),e._v(". ")],1)])],1)],1)],1)},i=[],l=r(3162),u=r(3313),o=r(4762),c=r(1044),f=r(2405),h=r(5151),m=r(5482),C=function(){var e=this,t=e._self._c;return t("div",[t("b-row",{attrs:{"no-gutters":"","align-h":"start","align-v":"center"}},[t("b-col",{attrs:{cols:"11",sm:"12"}},[t("div",[t("b-form-select",{attrs:{options:e.flashCartTypes,disabled:e.disabled},on:{input:function(t){return e.changeFlashCartType()}},model:{value:e.flashCartType,callback:function(t){e.flashCartType=t},expression:"flashCartType"}}),t("help-button",{staticClass:"help-button",attrs:{"popover-text":"Select the type of flash cart that you're using.",id:`${this.id}-flash-cart-type`}})],1)])],1),null!==this.flashCartType&&this.platformTypes[this.flashCartType].length>1?t("div",[t("b-row",{attrs:{"no-gutters":"","align-h":"start","align-v":"center"}},[t("b-col",{attrs:{cols:"11",sm:"12"}},[t("div",[t("b-form-select",{attrs:{options:this.platformTypes[this.flashCartType],disabled:e.disabled},on:{input:function(t){return e.$emit("input",t)}},model:{value:e.platformType,callback:function(t){e.platformType=t},expression:"platformType"}}),t("help-button",{staticClass:"help-button",attrs:{"popover-text":"Select the type of game that the save is for.",id:`${this.id}-platform-type`}})],1)])],1)],1):e._e()],1)},y=[],g=r(7900),p={name:"FlashCartType",props:{value:{type:String,default:null},id:String,disabled:{type:Boolean,default:!1}},components:{HelpButton:g.Z},methods:{changeFlashCartType(){null!==this.flashCartType&&1===this.platformTypes[this.flashCartType].length?(this.platformType=this.platformTypes[this.flashCartType][0].value,this.$emit("input",this.platformType)):this.platformType=null}},data(){return{flashCartType:null,platformType:null,flashCartTypes:[{value:null,text:"Choose flash cart type",disabled:!0},{value:"NES",text:"NES cart"},{value:"SNES",text:"SNES cart"},{value:"GB",text:"Gameboy/Gameboy Color cart"},{value:"GBA",text:"Gameboy Advance cart"},{value:"GenesisEverdrive",text:"Genesis cart (Everdrive)"},{value:"GenesisMegaSD",text:"Genesis cart (Mega SD)"},{value:"N64",text:"Nintendo 64 cart"},{value:"PCE",text:"TurboGrafx-16/PC Engine cart"},{value:"GG",text:"Game Gear cart"},{value:"SMS",text:"Master System/Mark III cart"}],platformTypes:{NES:[{value:"FlashCart-NES",text:"NES game"}],SNES:[{value:null,text:"Choose game type",disabled:!0},{value:"FlashCart-SNES",text:"SNES game"},{value:"FlashCart-SuperGameBoy",text:"Gameboy game"}],GB:[{value:"FlashCart-GB",text:"Gameboy/Gameboy Color game"}],GBA:[{value:null,text:"Choose game type",disabled:!0},{value:"FlashCart-GBA",text:"Gameboy Advance game"},{value:"FlashCart-GoombaEmulator",text:"GB/GBC game (Goomba emulator)"},{value:"FlashCart-PocketNesEmulator",text:"NES game (PocketNES emulator)"},{value:"FlashCart-SMSAdvanceEmulator",text:"SMS game (SMSAdvance emulator)"}],GenesisEverdrive:[{value:null,text:"Choose game type",disabled:!0},{value:"FlashCart-GenesisEverdrive",text:"Genesis game"},{value:"FlashCart-SegaCDGenesisEverdrive",text:"Sega CD game"},{value:"FlashCart-SMSGenesisEverdrive",text:"SMS game"},{value:"FlashCart-32XGenesisEverdrive",text:"32X game"},{value:"FlashCart-NESGenesisEverdrive",text:"NES game"}],GenesisMegaSD:[{value:null,text:"Choose game type",disabled:!0},{value:"FlashCart-GenesisMegaSD",text:"Genesis game"},{value:"FlashCart-SegaCDMegaSD",text:"Sega CD game"},{value:"FlashCart-SMSGenesisMegaSD",text:"SMS game"},{value:"FlashCart-32XGenesisMegaSD",text:"32X game"}],N64:[{value:null,text:"Choose game type",disabled:!0},{value:"FlashCart-N64",text:"Nintendo 64 game"},{value:"FlashCart-NESN64",text:"NES game"},{value:"FlashCart-Neon64Emulator",text:"NES game (Neon64 emulator)"},{value:"FlashCart-GB64Emulator",text:"GB/GBC game (GB64 emulator)"}],PCE:[{value:"FlashCart-PCE",text:"TurboGrafx-16/PC Engine game"}],GG:[{value:"FlashCart-GG",text:"Game Gear game"}],SMS:[{value:"FlashCart-SMS",text:"Master System/Mark III game"}]}}}},d=p,S=r(1001),w=(0,S.Z)(d,C,y,!1,null,"d602192c",null),A=w.exports,F=r(8509),v=(r(3408),r(4590),r(3462),r(3767),r(8585),r(8696),r(7327)),R=r(2976),T=r(7075);const E=!0,B=0,b=4,D=0,Z=2,I=0,_=1,x=2,z=5,N=4,M=8,L=12,k=16,U=32,O="US-ASCII",G={0:"Save state",1:"SRAM save",2:"Config data",5:"Palette"},P=k+U,q=65536,$=57344,V=24576,W=65536;function H(e){const t=new DataView(e),r=new Uint8Array(e);return{size:t.getUint16(D,E),type:t.getUint16(Z,E),uncompressedSize:t.getUint32(N,E),frameCount:t.getUint32(M,E),romChecksum:t.getUint32(L,E),gameTitle:u.Z.readNullTerminatedString(r,k,O,U)}}function j(e){const t=new ArrayBuffer(P),r=new DataView(t),a=new Uint8Array(t),s=new TextEncoder(O);a.fill(0),r.setUint16(D,e.size,E),r.setUint16(Z,e.type,E),r.setUint32(N,e.uncompressedSize,E),r.setUint32(M,e.frameCount,E),r.setUint32(L,e.romChecksum,E);const n=s.encode(e.gameTitle).slice(0,U-1);return a.set(n,k),t}function Y(e){switch(e.type){case I:case _:case x:case z:break;default:return!1}return!(e.size<P)&&(0!==e.uncompressedSize||e.type===x)}function X(e,t){const r=new ArrayBuffer(t),a=new DataView(r);return a.setUint32(0,e,E),r}function J(e,t,r,a){const s=X(a.getMagic(),b),n=T.Z.compress(e),i={size:n.byteLength+P,type:_,uncompressedSize:e.byteLength,frameCount:0,romChecksum:r,gameTitle:t},l=j(i),u=a.createEmptyConfigDataArrayBuffer(),o=a.concatEmulatorArrayBuffer(s,l,n,u),c={count:Math.max(W-o.byteLength,0),value:0};return R.Z.addPaddingToEnd(o,c)}function K(e,t){let r=b;if(e.byteLength<b+P)throw new Error("File is too short to contain a state header");let a=H(e.slice(r,r+P));while(Y(a)){if(a.type===t)return{stateHeader:a,offset:r};if(r+=a.size,r+P>e.byteLength)break;a=H(e.slice(r,r+P))}throw new Error(`No state header of type ${G[t]} found in file`)}class Q{static createFromRawDataInternal(e,t,r,a){const s=J(e,t,r,a);return new a(s)}static getFlashCartFileExtension(){return"esv"}static getRawFileExtension(){return"srm"}static adjustOutputSizesPlatform(){return null}constructor(e){const t=new DataView(e),r=t.getUint32(B,E),a=this.constructor.getMagic();if(r!==a)throw new Error(`File appears to be corrupted: expected 0x${a.toString(16)} but found 0x${r.toString(16)}`);const{stateHeader:s,offset:n}=K(e,_),i=this.getSramRomChecksumFromConfigData(e);let l=!1;0===i||i===s.romChecksum&&(l=!0),this.compressedSize=s.size-P,this.uncompressedSize=s.uncompressedSize,this.frameCount=s.frameCount,this.romChecksum=s.romChecksum,this.gameTitle=s.gameTitle;const u=n+P;if(l){const t=e.byteLength<$?V:$;this.rawArrayBuffer=e.slice(t,W)}else this.rawArrayBuffer=T.Z.decompress(e.slice(u),q);this.flashCartArrayBuffer=e}getSramRomChecksumFromConfigData(e){const{stateHeader:t,offset:r}=K(e,x);if(t.size!==this.constructor.getConfigDataLength())throw new Error(`Unrecognized config data type: size of ${t.size} is unknown`);return this.constructor.getPlatformSramRomChecksumFromConfigData(e,r)}static calculateRomChecksum(e){let t=0,r=0;const a=e.byteLength,s=new Uint8Array(e),n=s[a-1];for(let i=0;i<128;i+=1)t+=r<a?s[r]|s[r+1]<<8|s[r+2]<<16|s[r+3]<<24:n|n<<8|n<<16|n<<24,t>>>=0,r+=128;return t}static saveDataIsCompressed(){return!0}getRawArrayBuffer(){return this.rawArrayBuffer}getFlashCartArrayBuffer(){return this.flashCartArrayBuffer}getCompressedSize(){return this.compressedSize}getUncompressedSize(){return this.uncompressedSize}getGameTitle(){return this.gameTitle}getRomChecksum(){return this.romChecksum}getFrameCount(){return this.frameCount}}(0,v.Z)(Q,"LITTLE_ENDIAN",E),(0,v.Z)(Q,"TYPE_CONFIG_DATA",x);const ee=308,te=16,re=11,ae="US-ASCII",se=323,ne=128,ie=192,le=327,ue=329,oe=5,ce=6;function fe(e){return e===oe||e===ce}function he(e,t){if(fe(t))return 2048;switch(e){case 0:return 0;case 1:return 2048;case 2:return 8192;case 3:return 32768;case 4:return 131072;case 5:return 65536;default:throw new Error(`Unknown SRAM size value: ${e}. Valid values are 0 - 5`)}}class me{constructor(e){const t=new Uint8Array(e);this.isGbc=t[se]===ne||t[se]===ie;const r=this.isGbc?re:te;this.internalName=u.Z.readNullTerminatedString(t,ee,ae,r),this.cartridgeType=t[le],this.sramSize=he(t[ue],this.cartridgeType),this.romArrayBuffer=e}getInternalName(){return this.internalName}getRomArrayBuffer(){return this.romArrayBuffer}getIsGbc(){return this.isGbc}getCartridgeType(){return this.cartridgeType}getSramSize(){return this.sramSize}static getFileExtensions(){return[".gb",".gbc"]}}const Ce=1470575064,ye=0,ge=2,pe=4,de=5,Se=8,we=16,Ae=32,Fe="CFG",ve="US-ASCII",Re=we+Ae,Te=0,Ee=0;class Be extends Q{static getMagic(){return Ce}static getConfigDataLength(){return Re}static createFromRawData(e,t){const r=new me(t),a=r.getInternalName(),s=super.calculateRomChecksum(r.getRomArrayBuffer());return super.createFromRawDataInternal(e,a,s,Be)}static createFromRawDataInternal(e,t,r){return super.createFromRawDataInternal(e,t,r,Be)}static createFromFlashCartData(e){return new Be(e)}static requiresRom(){return{clazz:me,requiredToConvert:["convertToFormat"]}}static createEmptyConfigDataArrayBuffer(){const e=new ArrayBuffer(Re),t=new DataView(e),r=new Uint8Array(e),a=new TextEncoder(ve);r.fill(0),t.setUint16(ye,Re,super.LITTLE_ENDIAN),t.setUint16(ge,super.TYPE_CONFIG_DATA,super.LITTLE_ENDIAN),t.setUint8(pe,Te),t.setUint8(de,Ee),t.setUint32(Se,0,super.LITTLE_ENDIAN);const s=a.encode(Fe).slice(0,Ae-1);return r.set(s,Ae),e}static getPlatformSramRomChecksumFromConfigData(e,t){const r=new DataView(e);return r.getUint32(t+Se,super.LITTLE_ENDIAN)}static concatEmulatorArrayBuffer(e,t,r,a){return u.Z.concatArrayBuffers([e,t,r,a])}}const be=!0,De=16,Ze=0,Ie=441664846;class _e{constructor(e){const t=new DataView(e),r=t.getUint32(Ze,be);if(r!==Ie)throw new Error("This does not appear to be an NES ROM");this.isNes20Header=128===(12&t.getUint8(7)),this.romArrayBuffer=e}getIsNes20Header(){return this.isNes20Header}getRomArrayBufferWithHeader(){return this.romArrayBuffer}getRomArrayBufferWithoutHeader(){return this.romArrayBuffer.slice(De)}static getFileExtensions(){return[".nes"]}}const xe=1470575063,ze=0,Ne=2,Me=4,Le=5,ke=8,Ue=16,Oe=32,Ge="CFG",Pe="US-ASCII",qe=Ue+Oe,$e=3,Ve=0,We=0,He=0,je=1,Ye=(7&Ve)<<5|15&$e,Xe=(1&je^1)<<4|(3&He)<<5|3&We,Je="SAVE";class Ke extends Q{static getMagic(){return xe}static getConfigDataLength(){return qe}static createFromRawData(e,t){const r=Ke.calculateRomChecksum(t);return super.createFromRawDataInternal(e,Je,r,Ke)}static createFromRawDataInternal(e,t){return super.createFromRawDataInternal(e,Je,t,Ke)}static createFromFlashCartData(e){return new Ke(e)}static requiresRom(){return{clazz:_e,requiredToConvert:["convertToFormat"]}}static createEmptyConfigDataArrayBuffer(){const e=new ArrayBuffer(qe),t=new DataView(e),r=new Uint8Array(e),a=new TextEncoder(Pe);r.fill(0),t.setUint16(ze,qe,super.LITTLE_ENDIAN),t.setUint16(Ne,super.TYPE_CONFIG_DATA,super.LITTLE_ENDIAN),t.setUint8(Me,Ye),t.setUint8(Le,Xe),t.setUint32(ke,0,super.LITTLE_ENDIAN);const s=a.encode(Ge).slice(0,Oe-1);return r.set(s,Oe),e}static getPlatformSramRomChecksumFromConfigData(e,t){const r=new DataView(e);return r.getUint32(t+ke,super.LITTLE_ENDIAN)}static calculateRomChecksum(e){const t=new _e(e);return super.calculateRomChecksum(t.getRomArrayBufferWithoutHeader())}static concatEmulatorArrayBuffer(e,t,r,a){return u.Z.concatArrayBuffers([e,a,t,r])}}(0,v.Z)(Ke,"GAME_TITLE",Je);const Qe=!0,et=32752,tt="TMR SEGA",rt="US-ASCII",at=32762;class st{constructor(e){u.Z.checkMagic(e,et,tt,rt);const t=new DataView(e);this.checksum=t.getUint16(at,Qe),this.romArrayBuffer=e}getChecksum(){return this.checksum}static getFileExtensions(){return[".sms"]}}const nt=1470575068,it=0,lt=2,ut=4,ot=5,ct=6,ft=7,ht=8,mt=9,Ct=12,yt=20,gt=32,pt="CFG",dt="US-ASCII",St=yt+gt,wt=3,At=2,Ft=0,vt=0,Rt=64,Tt=0,Et="Made with savefileconverter.com";class Bt extends Q{static getMagic(){return nt}static getConfigDataLength(){return St}static getFlashCartFileExtension(){return"srm"}static getRawFileExtension(){return"srm"}static createFromRawData(e,t){const r=super.calculateRomChecksum(t);return super.createFromRawDataInternal(e,Et,r,Bt)}static createFromRawDataInternal(e,t){return super.createFromRawDataInternal(e,Et,t,Bt)}static createFromFlashCartData(e){return new Bt(e)}static requiresRom(){return{clazz:st,requiredToConvert:["convertToFormat"]}}static createEmptyConfigDataArrayBuffer(){const e=new ArrayBuffer(St),t=new DataView(e),r=new Uint8Array(e),a=new TextEncoder(dt);r.fill(0),t.setUint16(it,St,super.LITTLE_ENDIAN),t.setUint16(lt,super.TYPE_CONFIG_DATA,super.LITTLE_ENDIAN),t.setUint8(ut,wt),t.setUint8(ot,At),t.setUint8(ct,Ft),t.setUint8(ft,vt),t.setUint8(ht,Rt),t.setUint8(mt,Tt),t.setUint32(Ct,0,super.LITTLE_ENDIAN);const s=a.encode(pt).slice(0,gt-1);return r.set(s,gt),e}static getPlatformSramRomChecksumFromConfigData(e,t){const r=new DataView(e);return r.getUint32(t+Ct,super.LITTLE_ENDIAN)}static concatEmulatorArrayBuffer(e,t,r,a){return u.Z.concatArrayBuffers([e,t,r,a])}getUncompressedSize(){return this.rawArrayBuffer.byteLength}}(0,v.Z)(Bt,"GAME_TITLE",Et);var bt=r(7845);class Dt{static createFromFlashCartData(e){return new Dt(e,e)}static createFromRawData(e){return new Dt(e,e)}static createWithNewSize(e,t){const r=bt.Z.resizeRawSave(e.getRawArrayBuffer(),t);return Dt.createFromRawData(r)}static getFlashCartFileExtension(){return"srm"}static getRawFileExtension(){return null}static requiresRom(){return null}static adjustOutputSizesPlatform(){return"nes"}constructor(e,t){this.flashCartArrayBuffer=e,this.rawArrayBuffer=t}getRawArrayBuffer(){return this.rawArrayBuffer}getFlashCartArrayBuffer(){return this.flashCartArrayBuffer}}class Zt{static createFromFlashCartData(e){return new Zt(e,e)}static createFromRawData(e){return new Zt(e,e)}static createWithNewSize(e,t){const r=bt.Z.resizeRawSave(e.getRawArrayBuffer(),t);return Zt.createFromRawData(r)}static getFlashCartFileExtension(){return"srm"}static getRawFileExtension(){return null}static requiresRom(){return null}static adjustOutputSizesPlatform(){return"snes"}constructor(e,t){this.flashCartArrayBuffer=e,this.rawArrayBuffer=t}getRawArrayBuffer(){return this.rawArrayBuffer}getFlashCartArrayBuffer(){return this.flashCartArrayBuffer}}class It{static createFromFlashCartData(e){return new It(e,e)}static createFromRawData(e){return new It(e,e)}static createWithNewSize(e,t){const r=bt.Z.resizeRawSave(e.getRawArrayBuffer(),t);return It.createFromRawData(r)}static getFlashCartFileExtension(){return null}static getRawFileExtension(){return null}static requiresRom(){return null}static adjustOutputSizesPlatform(){return"gb"}constructor(e,t){this.flashCartArrayBuffer=e,this.rawArrayBuffer=t}getRawArrayBuffer(){return this.rawArrayBuffer}getFlashCartArrayBuffer(){return this.flashCartArrayBuffer}}var _t=r(4230);const xt=0;class zt{static createFromFlashCartData(e){return new zt(e,e)}static createFromRawData(e){const t=_t.Z.changeFillByte(e,xt);return new zt(t,e)}static createWithNewSize(e,t){const r=bt.Z.resizeRawSave(e.getRawArrayBuffer(),t);return zt.createFromRawData(r)}static getFlashCartFileExtension(){return"srm"}static getRawFileExtension(){return null}static requiresRom(){return null}static adjustOutputSizesPlatform(){return"genesis"}constructor(e,t){this.flashCartArrayBuffer=e,this.rawArrayBuffer=t}getRawArrayBuffer(){return this.rawArrayBuffer}getFlashCartArrayBuffer(){return this.flashCartArrayBuffer}}class Nt{static createFromFlashCartData({flashCartInternalSaveArrayBuffer:e=null,flashCartRamCartSaveArrayBuffer:t=null}){let r=o.Z.makeEmptySave(o.Z.INTERNAL_SAVE_SIZE),a=o.Z.makeEmptySave(Nt.FLASH_CART_RAM_CART_SIZE),s=o.Z.makeEmptySave(Nt.EMULATOR_RAM_CART_SIZE);if(null!==e&&(r=o.Z.truncateToActualSize(e),r.byteLength!==o.Z.INTERNAL_SAVE_SIZE))throw new Error(`Internal save RAM is not the correct size. Must be ${o.Z.INTERNAL_SAVE_SIZE} bytes`);return null!==t&&(a=o.Z.truncateToActualSize(t),s=o.Z.resize(a,Nt.EMULATOR_RAM_CART_SIZE)),new Nt(r,a,r,s)}static createFromRawData({rawInternalSaveArrayBuffer:e=null,rawRamCartSaveArrayBuffer:t=null}){let r=o.Z.makeEmptySave(o.Z.INTERNAL_SAVE_SIZE),a=o.Z.makeEmptySave(Nt.EMULATOR_RAM_CART_SIZE),s=o.Z.makeEmptySave(Nt.FLASH_CART_RAM_CART_SIZE);if(null!==e&&(r=o.Z.truncateToActualSize(e),r.byteLength!==o.Z.INTERNAL_SAVE_SIZE))throw new Error(`Internal save RAM is not the correct size. Must be ${o.Z.INTERNAL_SAVE_SIZE} bytes`);return null!==t&&(a=o.Z.truncateToActualSize(t),s=o.Z.resize(a,Nt.FLASH_CART_RAM_CART_SIZE)),new Nt(r,s,r,a)}static createWithNewSize(e,t){const r=o.Z.resize(e.rawRamCartSaveArrayBuffer,t);return new Nt(e.flashCartInternalSaveArrayBuffer,e.flashCartRamCartSaveArrayBuffer,e.rawInternalSaveArrayBuffer,r)}static getFlashCartFileExtension(){return null}static getFlashCartFileName(e=Nt.INTERNAL_MEMORY){switch(e){case Nt.INTERNAL_MEMORY:return"cd-bram.brm";case Nt.RAM_CART:return"cd-cart.srm";default:throw new Error(`Unknown index: ${e}`)}}static getRawFileExtension(){return"brm"}static requiresRom(){return null}static adjustOutputSizesPlatform(){return"segacd"}static getRawDefaultRamCartSize(){return Nt.EMULATOR_RAM_CART_SIZE}static getFlashCartDefaultRamCartSize(){return Nt.FLASH_CART_RAM_CART_SIZE}constructor(e,t,r,a){this.flashCartInternalSaveArrayBuffer=e,this.flashCartRamCartSaveArrayBuffer=t,this.rawInternalSaveArrayBuffer=r,this.rawRamCartSaveArrayBuffer=a}getRawArrayBuffer(e=Nt.INTERNAL_MEMORY){switch(e){case Nt.INTERNAL_MEMORY:return this.rawInternalSaveArrayBuffer;case Nt.RAM_CART:return this.rawRamCartSaveArrayBuffer;default:throw new Error(`Unknown index: ${e}`)}}getFlashCartArrayBuffer(e=Nt.INTERNAL_MEMORY){switch(e){case Nt.INTERNAL_MEMORY:return this.flashCartInternalSaveArrayBuffer;case Nt.RAM_CART:return this.flashCartRamCartSaveArrayBuffer;default:throw new Error(`Unknown index: ${e}`)}}}(0,v.Z)(Nt,"INTERNAL_MEMORY","internal-memory"),(0,v.Z)(Nt,"RAM_CART","ram-cart"),(0,v.Z)(Nt,"FLASH_CART_RAM_CART_SIZE",131072),(0,v.Z)(Nt,"EMULATOR_RAM_CART_SIZE",524288);class Mt{static createFromFlashCartData(e){return new Mt(e,e)}static createFromRawData(e){return new Mt(e,e)}static createWithNewSize(e,t){const r=bt.Z.resizeRawSave(e.getRawArrayBuffer(),t);return Mt.createFromRawData(r)}static getFlashCartFileExtension(){return"srm"}static getRawFileExtension(){return null}static requiresRom(){return null}static adjustOutputSizesPlatform(){return"nes"}constructor(e,t){this.flashCartArrayBuffer=e,this.rawArrayBuffer=t}getRawArrayBuffer(){return this.rawArrayBuffer}getFlashCartArrayBuffer(){return this.flashCartArrayBuffer}}class Lt{static createFromFlashCartData(e){let t=e;return _t.Z.isByteExpanded(e)&&!_t.Z.isEmpty(e)&&(t=_t.Z.byteCollapse(e)),new Lt(e,t)}static createFromRawData(e){return new Lt(e,e)}static createWithNewSize(e,t){const r=bt.Z.resizeRawSave(e.getRawArrayBuffer(),t);return Lt.createFromRawData(r)}static getFlashCartFileExtension(){return"srm"}static getRawFileExtension(){return null}static requiresRom(){return null}static adjustOutputSizesPlatform(){return"sms"}constructor(e,t){this.flashCartArrayBuffer=e,this.rawArrayBuffer=t}getRawArrayBuffer(){return this.rawArrayBuffer}getFlashCartArrayBuffer(){return this.flashCartArrayBuffer}}class kt extends zt{}var Ut=r(7978);const Ot="BUP2",Gt=0,Pt="US-ASCII",qt=32768,$t=0,Vt=128,Wt=16384;function Ht(e){try{u.Z.checkMagic(e,Gt,Ot,Pt)}catch(t){return!1}return e.byteLength>Ot.length&&Ut.Z.isPowerOf2(e.byteLength-Ot.length)}function jt(e){return(_t.Z.isEepromSave(e)||_t.Z.isByteExpanded(e))&&Ut.Z.isPowerOf2(e.byteLength)}function Yt(e){return(_t.Z.isEepromSave(e)||_t.Z.isByteExpanded(e))&&Ut.Z.isPowerOf2(e.byteLength)}function Xt(e){if(_t.Z.isEepromSave(e))return R.Z.padAtEndToMinimumSize(e,$t,Vt);const t=R.Z.getPadFromEndValueAndCount(e),r=R.Z.removePaddingFromEnd(e,t.count);return _t.Z.changeFillByte(r,$t)}function Jt(e){const t=e.slice(Ot.length),r=R.Z.getPadFromEndValueAndCount(t),a=R.Z.removePaddingFromEnd(t,r.count);return _t.Z.isEepromSave(a)?R.Z.padAtEndToMinimumSize(a,$t,Vt):R.Z.padAtEndToMinimumSize(_t.Z.byteExpand(a,$t),$t,Wt)}function Kt(e,t){const r=new TextEncoder(Pt),a=u.Z.bufferToArrayBuffer(r.encode(Ot)),s=R.Z.getPadFromEndValueAndCount(e);let n=R.Z.removePaddingFromEnd(e,s.count),i=t.padding.eeprom;return _t.Z.isEepromSave(n)||(n=_t.Z.byteCollapse(e),i=t.padding.sram),u.Z.concatArrayBuffers([a,R.Z.padAtEndToMinimumSize(n,i,qt)])}class Qt{static isRawSave(e){return Yt(e)}static convertFromRawToNewStyle(e,t,r){return Kt(e,t,r)}static createFromFlashCartData(e){if(Ht(e))return new Qt(e,Jt(e));if(jt(e))return new Qt(e,Xt(e));throw new Error("This does not appear to be a Mega SD Genesis save file")}static createFromRawData(e,t){if(Yt(e,t)){const r=Kt(e,t);return new Qt(r,e)}throw new Error("This does not appear to be a raw Genesis save file")}static createWithNewSize(e,t,r){const a=bt.Z.resizeRawSave(e.getRawArrayBuffer(),t);return Qt.createFromRawData(a,r)}static getFlashCartFileExtension(){return"SRM"}static getRawFileExtension(){return null}static requiresRom(){return null}static adjustOutputSizesPlatform(){return null}constructor(e,t){this.flashCartArrayBuffer=e,this.rawArrayBuffer=t}getRawArrayBuffer(){return this.rawArrayBuffer}getFlashCartArrayBuffer(){return this.flashCartArrayBuffer}}(0,v.Z)(Qt,"NEW_STYLE_MAGIC",Ot);const er=0,tr=255,rr={padding:{sram:er,eeprom:tr}};class ar extends Qt{static createFromRawData(e){return super.createFromRawData(e,rr)}static createFromFlashCartData(e){return super.createFromFlashCartData(e)}static createWithNewSize(e,t){return super.createWithNewSize(e,t,rr)}}const sr="BUP3",nr=0,ir="US-ASCII",lr=4,ur=lr+o.Z.INTERNAL_SAVE_SIZE;class or{static createFromFlashCartData(e){u.Z.checkMagic(e,nr,sr,ir);const t=e.byteLength===lr+o.Z.INTERNAL_SAVE_SIZE,r=e.byteLength===lr+o.Z.INTERNAL_SAVE_SIZE+or.FLASH_CART_RAM_CART_SIZE;if(!t&&!r)throw new Error("This file does not appear to be a Mega SD Sega CD save file");const a=e.slice(lr,lr+o.Z.INTERNAL_SAVE_SIZE);let s=o.Z.makeEmptySave(or.FLASH_CART_RAM_CART_SIZE);if(r){const t=e.slice(ur,ur+or.FLASH_CART_RAM_CART_SIZE);o.Z.isCorrectlyFormatted(t)&&(s=t)}const n=o.Z.truncateToActualSize(a);if(n.byteLength!==o.Z.INTERNAL_SAVE_SIZE)throw new Error(`Internal save RAM is not the correct size. Must be ${o.Z.INTERNAL_SAVE_SIZE} bytes`);const i=o.Z.truncateToActualSize(s),l=o.Z.resize(i,or.EMULATOR_RAM_CART_SIZE);return new or(e,n,l)}static createFromRawData({rawInternalSaveArrayBuffer:e=null,rawRamCartSaveArrayBuffer:t=null}){const r=new TextEncoder(ir),a=u.Z.bufferToArrayBuffer(r.encode(sr));let s=o.Z.makeEmptySave(o.Z.INTERNAL_SAVE_SIZE),n=o.Z.makeEmptySave(or.EMULATOR_RAM_CART_SIZE),i=o.Z.makeEmptySave(or.FLASH_CART_RAM_CART_SIZE);if(null!==e&&(s=o.Z.truncateToActualSize(e),s.byteLength!==o.Z.INTERNAL_SAVE_SIZE))throw new Error(`Internal save RAM is not the correct size. Must be ${o.Z.INTERNAL_SAVE_SIZE} bytes`);null!==t&&(n=o.Z.truncateToActualSize(t),i=o.Z.resize(n,or.FLASH_CART_RAM_CART_SIZE));const l=u.Z.concatArrayBuffers([a,s,i]);return new or(l,s,n)}static createWithNewSize(e,t){const r=o.Z.resize(e.rawRamCartSaveArrayBuffer,t);return new or(e.flashCartArrayBuffer,e.rawInternalSaveArrayBuffer,r)}static getFlashCartFileExtension(){return"SRM"}static getRawFileExtension(){return"brm"}static requiresRom(){return null}static adjustOutputSizesPlatform(){return"segacd"}static getRawDefaultRamCartSize(){return or.EMULATOR_RAM_CART_SIZE}static getFlashCartDefaultRamCartSize(){return or.FLASH_CART_RAM_CART_SIZE}constructor(e,t,r){this.flashCartArrayBuffer=e,this.rawInternalSaveArrayBuffer=t,this.rawRamCartSaveArrayBuffer=r}getRawArrayBuffer(e=or.INTERNAL_MEMORY){switch(e){case or.INTERNAL_MEMORY:return this.rawInternalSaveArrayBuffer;case or.RAM_CART:return this.rawRamCartSaveArrayBuffer;default:throw new Error(`Unknown index: ${e}`)}}getFlashCartArrayBuffer(){return this.flashCartArrayBuffer}}(0,v.Z)(or,"INTERNAL_MEMORY","internal-memory"),(0,v.Z)(or,"RAM_CART","ram-cart"),(0,v.Z)(or,"FLASH_CART_RAM_CART_SIZE",32768),(0,v.Z)(or,"EMULATOR_RAM_CART_SIZE",524288);const cr="BUP2",fr=0,hr="US-ASCII";function mr(e){try{u.Z.checkMagic(e,fr,cr,hr)}catch(t){return!1}return e.byteLength>cr.length&&Ut.Z.isPowerOf2(e.byteLength-cr.length)}function Cr(e){return Ut.Z.isPowerOf2(e.byteLength)}function yr(e){return e.slice(cr.length)}function gr(e){const t=new TextEncoder(hr),r=u.Z.bufferToArrayBuffer(t.encode(cr));return u.Z.concatArrayBuffers([r,e])}class pr{static createFromFlashCartData(e){if(mr(e))return new pr(e,yr(e));if(Cr(e)){const t=e;return new pr(gr(t),t)}throw new Error("This does not appear to be a Mega SD Sega Master System save file")}static createFromRawData(e){return new pr(gr(e),e)}static createWithNewSize(e,t){const r=bt.Z.resizeRawSave(e.getRawArrayBuffer(),t);return pr.createFromRawData(r)}static getFlashCartFileExtension(){return"SRM"}static getRawFileExtension(){return null}static requiresRom(){return null}static adjustOutputSizesPlatform(){return"sms"}constructor(e,t){this.flashCartArrayBuffer=e,this.rawArrayBuffer=t}getRawArrayBuffer(){return this.rawArrayBuffer}getFlashCartArrayBuffer(){return this.flashCartArrayBuffer}}const dr=0,Sr=0,wr={padding:{sram:dr,eeprom:Sr}};class Ar extends Qt{static createFromRawData(e){return super.createFromRawData(e,wr)}static createFromFlashCartData(e){return super.createFromFlashCartData(e)}static createWithNewSize(e,t){return super.createWithNewSize(e,t,wr)}}class Fr{static createFromFlashCartData(e){return new Fr(e,e)}static createFromRawData(e){return new Fr(e,e)}static createWithNewSize(e,t){const r=bt.Z.resizeRawSave(e.getRawArrayBuffer(),t);return Fr.createFromRawData(r)}static getFlashCartFileExtension(){return null}static getRawFileExtension(){return null}static requiresRom(){return null}static adjustOutputSizesPlatform(){return"gb"}constructor(e,t){this.flashCartArrayBuffer=e,this.rawArrayBuffer=t}getRawArrayBuffer(){return this.rawArrayBuffer}getFlashCartArrayBuffer(){return this.flashCartArrayBuffer}}class vr{static createFromFlashCartData(e){return new vr(e,e)}static createFromRawData(e){return new vr(e,e)}static createWithNewSize(e,t){const r=bt.Z.resizeRawSave(e.getRawArrayBuffer(),t);return vr.createFromRawData(r)}static getFlashCartFileExtension(){return null}static getRawFileExtension(){return null}static requiresRom(){return null}static adjustOutputSizesPlatform(){return"gba"}constructor(e,t){this.flashCartArrayBuffer=e,this.rawArrayBuffer=t}getRawArrayBuffer(){return this.rawArrayBuffer}getFlashCartArrayBuffer(){return this.flashCartArrayBuffer}}var Rr=r(9698);class Tr{static createFromFlashCartData(e){const t=Rr.Z.needsEndianSwap(e)?Rr.Z.endianSwap(e):e;return new Tr(e,t)}static createFromRawData(e){const t=Rr.Z.needsEndianSwap(e)?Rr.Z.endianSwap(e):e;return new Tr(t,e)}static createWithNewSize(e,t){const r=bt.Z.resizeRawSave(e.getRawArrayBuffer(),t);return Tr.createFromRawData(r)}static getFlashCartFileExtension(){return null}static getRawFileExtension(){return null}static requiresRom(){return null}static adjustOutputSizesPlatform(){return"n64"}constructor(e,t){this.flashCartArrayBuffer=e,this.rawArrayBuffer=t}getRawArrayBuffer(){return this.rawArrayBuffer}getFlashCartArrayBuffer(){return this.flashCartArrayBuffer}}const Er=131072,Br=170;function br(e,t){if(e.byteLength<=t){const r=u.Z.getFilledArrayBuffer(t-e.byteLength,Br);return u.Z.concatArrayBuffers([e,r])}return e}class Dr{static createFromFlashCartData(e){return new Dr(e,e,e)}static createFromRawData(e){const t=br(e,Er);return new Dr(t,t,e)}static createWithNewSize(e,t){const r=bt.Z.resizeRawSave(e.getOriginalRawArrayBuffer(),t,Br),a=bt.Z.resizeRawSave(e.getOriginalRawArrayBuffer(),t);return new Dr(r,a,e.getOriginalRawArrayBuffer())}static getFlashCartFileExtension(){return"srm"}static getRawFileExtension(){return null}static requiresRom(){return null}static adjustOutputSizesPlatform(){return"nes"}constructor(e,t,r){this.flashCartArrayBuffer=e,this.rawArrayBuffer=t,this.originalRawArrayBuffer=r}getRawArrayBuffer(){return this.rawArrayBuffer}getOriginalRawArrayBuffer(){return this.originalRawArrayBuffer}getFlashCartArrayBuffer(){return this.flashCartArrayBuffer}}const Zr=!1,Ir=[2037922634,2555782880],_r=[199217923,1165605945],xr=65536,zr=4*Ir.length,Nr=xr+zr,Mr=8192,Lr=xr+zr+Mr,kr=170,Ur=131072;function Or(e){const t=new DataView(e),r=Ir.every(((e,r)=>t.getUint32(xr+4*r,Zr)===e)),a=_r.every(((e,r)=>t.getUint32(Lr+4*r,Zr)===e));if(!r||!a)throw new Error("This does not appear to be a Neon64 save file")}function Gr(e){const t=new DataView(e);Ir.forEach(((e,r)=>{t.setUint32(xr+4*r,e,Zr)})),_r.forEach(((e,r)=>{t.setUint32(Lr+4*r,e,Zr)}))}class Pr{static createFromFlashCartData(e){if(e.byteLength!==Ur)throw new Error("This does not appear to be a Neon64 save file");return Or(e),new Pr(e,e.slice(Nr,Nr+Mr))}static createFromRawData(e){if(e.byteLength!==Mr)throw new Error("Neon64 only works with 8kB NES save files");const t=u.Z.getFilledArrayBuffer(Ur,kr);Gr(t);const r=u.Z.setArrayBufferPortion(t,e,Nr,0,Mr);return new Pr(r,e)}static createWithNewSize(e,t){const r=bt.Z.resizeRawSave(e.getRawArrayBuffer(),t);return new Pr(e.getFlashCartArrayBuffer(),r)}static getFlashCartFileExtension(){return"srm"}static getRawFileExtension(){return null}static requiresRom(){return null}static adjustOutputSizesPlatform(){return null}constructor(e,t){this.flashCartArrayBuffer=e,this.rawArrayBuffer=t}getRawArrayBuffer(){return this.rawArrayBuffer}getFlashCartArrayBuffer(){return this.flashCartArrayBuffer}}var qr=r(7885);const $r=!1,Vr="GB64",Wr=0,Hr="US-ASCII",jr=4,Yr=8,Xr=10,Jr=12,Kr=14,Qr=16,ea=16,ta=32,ra=40,aa=48,sa=52,na=128,ia=na,la=0,ua=131072,oa=170,ca=2,fa=0,ha=0,ma=0,Ca=0,ya=2,ga=0x02C445F9n,pa=0,da=3,Sa=4,wa=0,Aa=0,Fa=8192,va=17280,Ra=50048;function Ta(e){return e?Ra:va}function Ea(){const e=u.Z.getFilledArrayBuffer(ea,0),t=new DataView(e);return t.setUint32(0,134810378,!1),t.setUint32(4,252579084,!1),t.setUint32(8,50462976,!1),e}class Ba{static createFromFlashCartData(e,t){const r=new me(t);return Ba.createFromFlashCartDataInternal(e,r.getSramSize())}static createFromFlashCartDataInternal(e,t){u.Z.checkMagic(e,Wr,Vr,Hr);const r=new DataView(e),a=r.getUint32(jr,$r),s=r.getUint32(aa,$r),n=r.getUint32(sa,$r),i=a===ca;if(a<0||a>ca)throw new Error(`Found version ${a} but can only read versions 0 through ${ca}`);if(s<pa||s>Sa)throw new Error(`Unrecognized stored info type: ${s}`);if(s===da||s===Sa)throw new Error("This file does not contain save data");let l=null;if(i){const t=e.slice(na,na+n);l=qr.ZP.inflate(t)}else l=e.slice(na);const o=Math.max(t,Fa),c=l.slice(wa,wa+o);return new Ba(e,c,l)}static createFromRawData(e,t){const r=new me(t);return Ba.createFromRawDataInternal(e,r.getSramSize(),r.getIsGbc())}static createFromRawDataInternal(e,t,r){const a=u.Z.setMagic(u.Z.getFilledArrayBuffer(ia,la),Wr,Vr,Hr),s=new DataView(a),n=new Uint8Array(a),i=new Uint8Array(Ea());n.set(i,Qr),s.setUint32(jr,ca,$r),s.setUint16(Yr,fa,$r),s.setUint16(Xr,ha,$r),s.setUint16(Jr,ma,$r),s.setUint16(Kr,Ca,$r),s.setUint32(ta,ya,$r),s.setBigUint64(ra,ga,$r),s.setUint32(aa,pa,$r);const l=Ta(r),o=bt.Z.resizeRawSave(e,t,Aa),c=u.Z.getFilledArrayBuffer(l,Aa),f=u.Z.concatArrayBuffers([o,c]),h=qr.ZP.gzip(f);s.setUint32(sa,h.byteLength,$r);const m=u.Z.getFilledArrayBuffer(ua-ia-h.byteLength,oa),C=u.Z.concatArrayBuffers([a,h,m]);return new Ba(C,e,f)}static createWithNewSize(e,t){const r=bt.Z.resizeRawSave(e.getRawArrayBuffer(),t);return new Ba(e.getFlashCartArrayBuffer(),r,e.gameboyStateDataArrayBuffer)}static getFlashCartFileExtension(){return"fla"}static getRawFileExtension(){return"srm"}static requiresRom(){return{clazz:me,requiredToConvert:["convertToFormat","convertToRaw"]}}static adjustOutputSizesPlatform(){return"gb"}constructor(e,t,r){this.flashCartArrayBuffer=e,this.rawArrayBuffer=t,this.gameboyStateDataArrayBuffer=r}getRawArrayBuffer(){return this.rawArrayBuffer}getFlashCartArrayBuffer(){return this.flashCartArrayBuffer}getGameboyStateDataArrayBuffer(){return this.gameboyStateDataArrayBuffer}}var ba=r(1492);class Da{static createFromFlashCartData(e){return ba.Z.verifyPcEngineData(e),new Da(e,e)}static createFromRawData(e){return ba.Z.verifyPcEngineData(e),new Da(e,e)}static getFlashCartFileExtension(){return"srm"}static getRawFileExtension(){return null}static requiresRom(){return null}static adjustOutputSizesPlatform(){return null}constructor(e,t){this.flashCartArrayBuffer=e,this.rawArrayBuffer=t}getRawArrayBuffer(){return this.rawArrayBuffer}getFlashCartArrayBuffer(){return this.flashCartArrayBuffer}}class Za{static createFromFlashCartData(e){return new Za(e,e)}static createFromRawData(e){return new Za(e,e)}static createWithNewSize(e,t){const r=bt.Z.resizeRawSave(e.getRawArrayBuffer(),t);return Za.createFromRawData(r)}static getFlashCartFileExtension(){return"srm"}static getRawFileExtension(){return null}static requiresRom(){return null}static adjustOutputSizesPlatform(){return"gamegear"}constructor(e,t){this.flashCartArrayBuffer=e,this.rawArrayBuffer=t}getRawArrayBuffer(){return this.rawArrayBuffer}getFlashCartArrayBuffer(){return this.flashCartArrayBuffer}}class Ia{static createFromFlashCartData(e){return new Ia(e,e)}static createFromRawData(e){return new Ia(e,e)}static createWithNewSize(e,t){const r=bt.Z.resizeRawSave(e.getRawArrayBuffer(),t);return Ia.createFromRawData(r)}static getFlashCartFileExtension(){return"srm"}static getRawFileExtension(){return null}static requiresRom(){return null}static adjustOutputSizesPlatform(){return"sms"}constructor(e,t){this.flashCartArrayBuffer=e,this.rawArrayBuffer=t}getRawArrayBuffer(){return this.rawArrayBuffer}getFlashCartArrayBuffer(){return this.flashCartArrayBuffer}}var _a={name:"ConvertFlashCarts",data(){return{flashCartSaveData:null,romData:null,flashCartType:null,flashCartTypePrevious:null,flashCartTypeClass:null,errorMessage:null,outputFilename:null,outputFilesize:null,conversionDirection:"convertToRaw",inputArrayBuffer:null,inputFilename:null,inputSegaCd:{},segaCdSaveType:"internal-memory"}},components:{ConversionDirection:m.Z,InputFile:c.Z,OutputFilename:f.Z,OutputFilesize:h.Z,FlashCartType:A,SegaCdSaveTypeSelector:F.Z},computed:{isSegaCdWithTwoOutputFiles:{get(){return this.flashCartTypeIsSegaCdWithTwoOutputFiles(this.flashCartType)}},isSegaCdWithOneOutputFile:{get(){return this.flashCartTypeIsSegaCdWithOneOutputFile(this.flashCartType)}},isSegaCd:{get(){return this.flashCartTypeIsSegaCd(this.flashCartType)}},displayOutputFileSize:{get(){return null!==this.flashCartTypeClass&&null!==this.flashCartTypeClass.adjustOutputSizesPlatform()&&(!this.isSegaCd||"convertToRaw"===this.conversionDirection&&"ram-cart"===this.segaCdSaveType)}},romIsRequired:{get(){if(null===this.flashCartTypeClass)return!1;let e=[];return null!==this.flashCartTypeClass.requiresRom()&&(e=this.flashCartTypeClass.requiresRom().requiredToConvert),e.indexOf(this.conversionDirection)>=0}}},methods:{flashCartTypeIsSegaCdWithTwoOutputFiles(e){return"FlashCart-SegaCDGenesisEverdrive"===e},flashCartTypeIsSegaCdWithOneOutputFile(e){return"FlashCart-SegaCDMegaSD"===e},flashCartTypeIsSegaCd(e){return this.flashCartTypeIsSegaCdWithTwoOutputFiles(e)||this.flashCartTypeIsSegaCdWithOneOutputFile(e)},changeConversionDirection(e){this.conversionDirection=e,this.flastCartSaveData=null,this.romData=null,this.flashCartType=null,this.flashCartTypePrevious=null,this.flashCartTypeClass=null,this.errorMessage=null,this.outputFilename=null,this.outputFilesize=null,this.inputArrayBuffer=null,this.inputFilename=null,this.inputSegaCd={},this.segaCdSaveType="internal-memory"},getFileExtensionsString(e){return`(${e.getFileExtensions().map((e=>`*${e}`)).join(", ")})`},flashCartTypeChanged(){if(null!==this.flashCartType)switch(this.romData=null,this.flashCartType){case"FlashCart-GoombaEmulator":this.flashCartTypeClass=Be;break;case"FlashCart-PocketNesEmulator":this.flashCartTypeClass=Ke;break;case"FlashCart-SMSAdvanceEmulator":this.flashCartTypeClass=Bt;break;case"FlashCart-NES":this.flashCartTypeClass=Dt;break;case"FlashCart-SNES":this.flashCartTypeClass=Zt;break;case"FlashCart-SuperGameBoy":this.flashCartTypeClass=It;break;case"FlashCart-GenesisEverdrive":this.flashCartTypeClass=zt;break;case"FlashCart-SegaCDGenesisEverdrive":this.flashCartTypeClass=Nt;break;case"FlashCart-NESGenesisEverdrive":this.flashCartTypeClass=Mt;break;case"FlashCart-SMSGenesisEverdrive":this.flashCartTypeClass=Lt;break;case"FlashCart-32XGenesisEverdrive":this.flashCartTypeClass=kt;break;case"FlashCart-GenesisMegaSD":this.flashCartTypeClass=ar;break;case"FlashCart-SegaCDMegaSD":this.flashCartTypeClass=or;break;case"FlashCart-SMSGenesisMegaSD":this.flashCartTypeClass=pr;break;case"FlashCart-32XGenesisMegaSD":this.flashCartTypeClass=Ar;break;case"FlashCart-GB":this.flashCartTypeClass=Fr;break;case"FlashCart-GBA":this.flashCartTypeClass=vr;break;case"FlashCart-N64":this.flashCartTypeClass=Tr;break;case"FlashCart-NESN64":this.flashCartTypeClass=Dr;break;case"FlashCart-Neon64Emulator":this.flashCartTypeClass=Pr;break;case"FlashCart-GB64Emulator":this.flashCartTypeClass=Ba;break;case"FlashCart-PCE":this.flashCartTypeClass=Da;break;case"FlashCart-GG":this.flashCartTypeClass=Za;break;case"FlashCart-SMS":this.flashCartTypeClass=Ia;break;default:this.flashCartTypeClass=null;break}else this.flashCartTypeClass=null;const e=this.isSegaCd,t=this.flashCartTypeIsSegaCd(this.flashCartTypePrevious);e!==t&&"convertToRaw"!==this.conversionDirection&&(this.inputArrayBuffer=null,this.flashCartSaveData=null,this.inputFilename=null,this.inputSegaCd={},this.outputFilesize=null,this.$refs.inputFileSegaCdInternalMemory&&this.$refs.inputFileSegaCdInternalMemory.reset(),this.$refs.inputFileSegaCdRamCart&&this.$refs.inputFileSegaCdRamCart.reset(),this.$refs.inputFileEmulator&&this.$refs.inputFileEmulator.reset()),this.flashCartTypePrevious=this.flashCartType,this.segaCdSaveType=this.getDefaultSegaCdSaveType(),this.updateFlashCartSaveData()},changeSegaCdSaveType(e){this.segaCdSaveType=e,this.updateFlashCartSaveData()},readRomData(e){this.romData=e.arrayBuffer,this.segaCdSaveType=this.getDefaultSegaCdSaveType(),this.updateFlashCartSaveData()},hasRequiredRomData(){return!this.romIsRequired||null!==this.romData},hasRequiredInputFileData(){return null!==this.inputArrayBuffer&&null!==this.inputFilename},getOutputFilename(e,t){return null!==t?u.Z.changeFilenameExtension(e,t):e},getFlashCartInput(){return this.isSegaCdWithTwoOutputFiles?"internal-memory"===this.segaCdSaveType?{flashCartInternalSaveArrayBuffer:this.inputArrayBuffer}:{flashCartRamCartSaveArrayBuffer:this.inputArrayBuffer}:this.inputArrayBuffer},getRawInput(){return this.isSegaCdWithTwoOutputFiles?"internal-memory"===this.segaCdSaveType?{rawInternalSaveArrayBuffer:this.inputArrayBuffer}:{rawRamCartSaveArrayBuffer:this.inputArrayBuffer}:this.isSegaCdWithOneOutputFile?this.inputSegaCd:this.inputArrayBuffer},getFlashCartFilename(){return this.isSegaCdWithTwoOutputFiles?this.flashCartTypeClass.getFlashCartFileName(this.segaCdSaveType):this.getOutputFilename(this.inputFilename,this.flashCartTypeClass.getFlashCartFileExtension())},getRawFilename(){if(this.isSegaCd){const e="internal-memory"===this.segaCdSaveType?" - internal memory":" - ram cartridge";return`${u.Z.removeFilenameExtension(this.inputFilename)}${e}.${this.flashCartTypeClass.getRawFileExtension()}`}return this.getOutputFilename(this.inputFilename,this.flashCartTypeClass.getRawFileExtension())},getDefaultOutputFilesize(){return this.isSegaCd?"internal-memory"===this.segaCdSaveType?o.Z.INTERNAL_SAVE_SIZE:"convertToRaw"===this.conversionDirection?this.flashCartTypeClass.getRawDefaultRamCartSize():this.flashCartTypeClass.getFlashCartDefaultRamCartSize():this.flashCartSaveData.getRawArrayBuffer().byteLength},getDefaultSegaCdSaveType(){return this.isSegaCdWithTwoOutputFiles&&null!==this.inputArrayBuffer&&this.inputArrayBuffer.byteLength>o.Z.INTERNAL_SAVE_SIZE?"ram-cart":"internal-memory"},updateFlashCartSaveData(){if(this.errorMessage=null,null!==this.flashCartTypeClass&&this.hasRequiredRomData()&&this.hasRequiredInputFileData())try{"convertToRaw"===this.conversionDirection?(this.flashCartSaveData=this.flashCartTypeClass.createFromFlashCartData(this.getFlashCartInput(),this.romData),this.outputFilename=this.getRawFilename()):(this.flashCartSaveData=this.flashCartTypeClass.createFromRawData(this.getRawInput(),this.romData),this.outputFilename=this.getFlashCartFilename()),this.outputFilesize=this.getDefaultOutputFilesize()}catch(e){this.errorMessage="This file does not seem to be in the correct format",this.flashCartSaveData=null,this.outputFilename=null,this.segaCdSaveType="internal-memory"}else this.flashCartSaveData=null,this.outputFilename=null},readFlashCartSaveData(e){this.inputArrayBuffer=e.arrayBuffer,this.inputFilename=e.filename,this.segaCdSaveType=this.getDefaultSegaCdSaveType(),this.inputSegaCd={},this.updateFlashCartSaveData()},readEmulatorSaveData(e,t=null){this.inputArrayBuffer=e.arrayBuffer,this.inputFilename=e.filename,this.segaCdSaveType=this.getDefaultSegaCdSaveType(),null!==t?this.inputSegaCd[t]=e.arrayBuffer:this.inputSegaCd={},this.updateFlashCartSaveData()},convertFile(){let e=this.flashCartSaveData,t=!1;t=this.isSegaCd?this.flashCartSaveData.getRawArrayBuffer(this.flashCartTypeClass.RAM_CART).byteLength!==this.outputFilesize:this.flashCartSaveData.getRawArrayBuffer().byteLength!==this.outputFilesize,t&&(e=this.flashCartTypeClass.createWithNewSize(this.flashCartSaveData,this.outputFilesize));let r=null;r="convertToRaw"===this.conversionDirection?this.isSegaCd?e.getRawArrayBuffer(this.segaCdSaveType):e.getRawArrayBuffer():this.isSegaCd?e.getFlashCartArrayBuffer(this.segaCdSaveType):e.getFlashCartArrayBuffer();const a=new Blob([r],{type:"application/octet-stream"});(0,l.saveAs)(a,this.outputFilename)}}},xa=_a,za=(0,S.Z)(xa,n,i,!1,null,"e5c5d108",null),Na=za.exports,Ma={name:"FlashCartsView",components:{ConvertFlashCarts:Na}},La=Ma,ka=(0,S.Z)(La,a,s,!1,null,null,null),Ua=ka.exports},9698:function(e,t,r){r.d(t,{Z:function(){return u}});var a=r(6676);const s=[512,2048],n=[32768],i=[131072],l=4;class u{static needsEndianSwap(e){return!u.isEepromSave(e)}static isEepromSave(e){return s.indexOf(e.byteLength)>=0}static isSramSave(e){return n.indexOf(e.byteLength)>=0}static isFlashRamSave(e){return i.indexOf(e.byteLength)>=0}static getFileExtension(e){if(u.isEepromSave(e))return"eep";if(u.isSramSave(e))return"sra";if(u.isFlashRamSave(e))return"fla";throw new Error(`Unrecognized N64 file size: ${e.byteLength} bytes`)}static endianSwap(e){if(e.byteLength%l!==0)throw new Error(`N64 file size must be a multiple of ${l} bytes`);return a.Z.swap(e,l)}}},1492:function(e,t,r){r.d(t,{Z:function(){return u}});var a=r(3313);const s=2048,n="HUBM",i="US-ASCII",l=0;class u{static verifyPcEngineData(e){if(e.byteLength!==s)throw new Error(`File is the incorrect size: expected ${s} bytes but found ${e.byteLength} bytes`);return a.Z.checkMagic(e,l,n,i)}}},4762:function(e,t,r){r.d(t,{Z:function(){return S}});var a=r(7327),s=(r(3408),r(4590),r(3462),r(3767),r(8585),r(8696),r(2137)),n=r(3313);const i=!1,l=[95,95,95,95,95,95,95,95,95,95,95,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,69,71,65,95,67,68,95,82,79,77,0,1,0,0,0,82,65,77,95,67,65,82,84,82,73,68,71,69,95,95,95],u=32,o=4,c=16,f=24,h=64,m=2,C=m+1,y=64,g=32;function p(e,t){const r=e.byteLength-y+t,a=new DataView(e),s=new Uint16Array(o);let n=r;for(let l=0;l<o;l+=1)s[l]=a.getUint16(n,i),n+=2;for(let i=0;i<o/2;i+=1){let e=0;for(let t=i+1;t<o;t+=1)s[i]===s[t]&&(e+=1);if(e>o/2)return s[i]}throw new Error(`Unable to find repeat code at offset from directory 0x${t.toString(16)}`)}function d(e,t,r){const a=e.byteLength-y+t,s=new DataView(e);let n=a;for(let l=0;l<o;l+=1)s.setUint16(n,r,i),n+=2}class S{static getActualSize(e){const t=new Uint8Array(e),r=s.Z.segacd.findIndex((e=>l.slice(u).every(((r,a)=>r===t[e-u+a]))));if(-1===r)throw new Error("This does not appear to be a Sega CD save file");return s.Z.segacd[r]}static isCorrectlyFormatted(e){try{S.getActualSize(e)}catch(t){return!1}return!0}static truncateToActualSize(e){return e.slice(0,S.getActualSize(e))}static makeEmptySave(e){const t=n.Z.getFilledArrayBuffer(e-l.length,0),r=new ArrayBuffer(l.length),a=new Uint8Array(r);l.forEach(((e,t)=>{a[t]=e}));const s=e/h-C;return S.setNumFreeBlocks(r,s),n.Z.concatArrayBuffers([t,r])}static getNumFiles(e){return p(e,f)}static getNumFreeBlocks(e){return p(e,c)}static setNumFiles(e,t){d(e,f,t)}static setNumFreeBlocks(e,t){d(e,c,t)}static getTotalAvailableBlocks(e){return Math.ceil(e.byteLength/h)-m}static resize(e,t){if(-1===s.Z.segacd.indexOf(t))throw new Error(`${t} bytes is not a valid size for a Sega CD save`);const r=S.truncateToActualSize(e);if(t===r.byteLength)return r;const a=S.getNumFiles(r),i=a%2===1?a+1:a,u=i*g,o=r.byteLength-l.length,c=o-u,f=r.slice(0,c),m=r.slice(c,c+u),C=r.slice(o),y=S.getNumFreeBlocks(r),p=(t-r.byteLength)/h,d=y+p;if(d<0){const e=r.byteLength/h,a=t/h;throw new Error(`Insufficient free blocks in file to change size from ${e} to ${a} blocks. Previous free blocks: ${y}`)}if(S.setNumFreeBlocks(C,d),t>r.byteLength){const e=n.Z.getFilledArrayBuffer(t-r.byteLength,0);return n.Z.concatArrayBuffers([f,e,m,C])}const w=r.byteLength-t,A=f.byteLength-w,F=f.slice(0,A),v=f.slice(A),R=new Uint8Array(v);return R.forEach((e=>{if(0!==e&&255!==e)throw new Error(`Cannot resize file down to ${t} bytes because it would remove a portion that contains game data`)})),n.Z.concatArrayBuffers([F,m,C])}}(0,a.Z)(S,"INTERNAL_SAVE_SIZE",8192)}}]);