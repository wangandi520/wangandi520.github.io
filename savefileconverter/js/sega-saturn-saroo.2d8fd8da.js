"use strict";(self["webpackChunksave_file_converter"]=self["webpackChunksave_file_converter"]||[]).push([[487],{4794:function(e,t,a){a.r(t),a.d(t,{default:function(){return pt}});var r=function(){var e=this,t=e._self._c;return t("div",{staticClass:"home"},[t("ConvertSegaSaturnSaroo")],1)},n=[],s=function(){var e=this,t=e._self._c;return t("div",[t("b-container",[t("b-row",{attrs:{"no-gutters":"","align-h":"center","align-v":"start"}},[t("b-col",{attrs:{sm:"12",md:"5","align-self":"start"}},[t("b-row",{attrs:{"no-gutters":"","align-h":"center","align-v":"start"}},[t("b-col",{attrs:{cols:"12"}},[t("b-jumbotron",{class:"md"===e.$mq?"fix-jumbotron":"",attrs:{fluid:"","header-level":e._f("mq")(e.$mq,{xs:5,sm:5,md:5,lg:5,xl:4})},scopedSlots:e._u([{key:"header",fn:function(){return[e._v("Saroo")]},proxy:!0}])})],1)],1),"convertToRaw"===this.conversionDirection?t("div",[t("input-file",{attrs:{errorMessage:this.errorMessage,placeholderText:"Choose a file to convert (*.BIN)",acceptExtension:".BIN",leaveRoomForHelpIcon:!0,helpText:"Please select SS_SAVE.BIN, SS_MEMS.BIN, or SS_BUP.BIN from your Saroo"},on:{load:function(t){return e.readSegaSaturnSaveData(t)}}}),t("file-list",{attrs:{display:null!==this.segaSaturnSaveData,files:this.getSarooSaveDataFileListEntries()},on:{change:function(t){return e.changeSelectedSaveData(t)}},model:{value:e.selectedSaveData,callback:function(t){e.selectedSaveData=t},expression:"selectedSaveData"}})],1):t("div",[t("output-filename",{attrs:{leaveRoomForHelpIcon:!1},model:{value:e.outputFilename,callback:function(t){e.outputFilename=t},expression:"outputFilename"}}),t("sega-cd-save-type-selector",{attrs:{value:this.segaCdSaveType,ramCartText:"Backup cartridge"},on:{change:function(t){return e.changeSegaCdSaveType(t)}}})],1)],1),t("b-col",{attrs:{sm:"12",md:"2",lg:"2",xl:"2","align-self":"start"}},[t("conversion-direction",{attrs:{horizontalLayout:["md","lg","xl"],verticalLayout:["xs","sm"],conversionDirection:this.conversionDirection},on:{change:function(t){return e.changeConversionDirection(t)}}})],1),t("b-col",{attrs:{sm:"12",md:"5","align-self":"start"}},[t("b-row",{attrs:{"no-gutters":"","align-h":"center","align-v":"start"}},[t("b-col",{attrs:{cols:"12"}},[t("b-jumbotron",{class:"md"===e.$mq?"fix-jumbotron":"",attrs:{fluid:"","header-level":e._f("mq")(e.$mq,{xs:5,sm:5,md:5,lg:5,xl:4})},scopedSlots:e._u([{key:"header",fn:function(){return[e._v("Individual saves")]},proxy:!0}])})],1)],1),"convertToRaw"===this.conversionDirection?t("div",[t("output-filename",{model:{value:e.outputFilename,callback:function(t){e.outputFilename=t},expression:"outputFilename"}})],1):t("div",[t("input-file",{attrs:{errorMessage:this.errorMessage,placeholderText:"Choose files to add (*.BUP)",acceptExtension:".BUP",leaveRoomForHelpIcon:!1,allowMultipleFiles:!0},on:{load:function(t){return e.readIndividualFileSaveData(t)}}}),this.needsSaturnRomData?t("div",[t("input-file",{ref:"inputFileSaturnRomData",attrs:{errorMessage:this.saturnRomErrorMessage,placeholderText:"Select track 1 from the game's .bin/.cue files",acceptExtension:".bin",leaveRoomForHelpIcon:!0,helpText:"Saroo internal memory files require additional information about the game. It's generally contained in track 1 of the game's .bin/.cue files.\n              You can only add saves from one game at a time to Saroo internal memory files. All processing is done on your local machine and your ROMs are not sent anywhere.",id:"inputFileSaturnRomData"},on:{load:function(t){return e.readSaturnRom(t)}}})],1):e._e(),t("file-list",{attrs:{display:null!==this.segaSaturnSaveData,files:this.getIndividualFileListEntries(),enabled:!1,showMessageWhenEmpty:!1}}),t("input-file",{ref:"inputFileToMergeInfo",attrs:{errorMessage:this.saveDataToMergeIntoErrorMessage,placeholderText:"Optional: Add to existing Saroo file",acceptExtension:".BIN",leaveRoomForHelpIcon:!0,helpText:"The Saroo has one single common file for internal memory saves and one for backup cartridge saves. You may wish to add the saves selected above\n            to your existing file to preserve the other saves in it. If any of the saves selected above are already present in the file they will be overwritten.\n            Overwritten files will be highlighted in red, with the replacement files highlighted in green.",id:"inputFileToMergeInfo"},on:{load:function(t){return e.readSaveDataToMergeInfo(t)}}}),t("file-list",{attrs:{display:null!==this.segaSaturnSaveDataToMergeInto,files:this.getSaveDataToMergeInfoFileListEntries(),enabled:!1,showMessageWhenEmpty:!1}})],1)],1)],1),t("b-row",{staticClass:"justify-content-md-center",attrs:{"align-h":"center"}},[t("b-col",{attrs:{cols:"auto",sm:"4",md:"3",lg:"2","align-self":"center"}},[t("b-button",{staticClass:"sega-saturn-saroo-convert-button",attrs:{variant:"success",block:"",disabled:this.convertButtonDisabled},on:{click:function(t){return e.convertFile()}}},[e._v(" Convert! ")])],1)],1)],1)],1)},i=[],o=a(3162),l=a(1044),u=a(2405),c=a(5482),g=a(1302),h=a(8509),S=a(5451),m=(a(3408),a(4590),a(3462),a(3767),a(8585),a(8696),a(7658),a(3313));class d{static arraysEqual(e,t){if(e.length!==t.length)return!1;for(let a=0;a<e.length;a+=1)if(e[a]!==t[a])return!1;return!0}static createSequentialArray(e,t){return Array(t).fill().map(((t,a)=>a+e))}}var f=a(1165),v=a(7313);function y(e){return{byteNum:Math.floor(e/8),bitNum:e%8}}function p(e,t){const{byteNum:a,bitNum:r}=y(e);return 0!==(t[a]&1<<r)}function F(e,t){const{byteNum:a,bitNum:r}=y(e);if(a>t.length)throw new Error(`Cannot address block number ${e} in an occupancy bitmap of size ${t.length} bytes`);t[a]|=1<<r}class D{static getBlockOccupancy(e,t,a){const r=new Uint8Array(e),n=Math.min(t/a,8*e.byteLength),s=d.createSequentialArray(0,n).map((e=>p(e,r))),i=s.reduce(((e,t,a)=>(t&&e.push(a),e)),[]);return{blockOccupancy:s,usedBlocks:i}}static createBlockOccupancyBitmap(e,t){const a=m.Z.getFilledArrayBuffer(t,0),r=new Uint8Array(a);return e.forEach((e=>F(e,r))),a}}const E=!1,T="Saroo Save File",I=0,N="US-ASCII",b=65536,A=128,w=64,C=16,M="US-ASCII",Z=1,_=b/C,B=_-Z,R=0,U="SaroSave",L=0,k="US-ASCII",O=8,V=12,x=14,H=32,G=62,P=64,$=1,Y=0,q=12,z=16,j=27,W=28,K=62,J=64,Q=0;function X(e,t){if(e<Z)return!1;const a=new DataView(t),r=a.getUint32(e*C,E);return 0!==r&&t.byteLength>=(e+1)*b}function ee(e,t){return t.slice(e*b,(e+1)*b)}function te(e,t,a){return e.slice(a*t,(a+1)*t)}function ae(e,t){const a=t.slice(e),r=a.find((e=>e));if(void 0!==r)return r+e;throw new Error("No further block is occupied")}function re(e,t,a,r){const n=d.createSequentialArray(0,Math.ceil(a/t));let s=e;return n.map((()=>(s=ae(s,r),s)))}function ne(e,t,a,r){const n=e.map((e=>te(r,t,e)));return m.Z.concatArrayBuffers(n).slice(0,a)}function se(e,t){const a=ee(e,t),r=new DataView(a),n=new Uint8Array(a);try{m.Z.checkMagic(a,L,U,k)}catch(S){return{gameId:null,saveFiles:[]}}const s=r.getUint32(O,E),i=r.getUint16(V,E),o=r.getUint16(x,E),l=m.Z.readNullTerminatedString(n,H,M,C);let u=r.getUint16(G,E);const c=a.slice(P,P+w),g=D.getBlockOccupancy(c,s,i),h=[];while(u!==Q){const e=te(a,i,u),t=new DataView(e),r=new Uint8Array(e),n=m.Z.readNullTerminatedString(r,Y,f.Z.ARCHIVE_ENTRY_NAME_ENCODING,f.Z.ARCHIVE_ENTRY_NAME_LENGTH),o=t.getUint8(j),l=m.Z.readNullTerminatedString(r,z,f.Z.ARCHIVE_ENTRY_COMMENT_ENCODING,f.Z.ARCHIVE_ENTRY_COMMENT_LENGTH),c=t.getUint32(W,E),g=t.getUint32(q,E),S=e.slice(J,J+w),d=D.getBlockOccupancy(S,s,i),y=re(u,i,g,d.blockOccupancy),p=ne(y,i,g,a);u=t.getUint16(K,E),h.push({name:n,languageCode:o,language:v.Z.getLanguageString(o),comment:l,dateCode:c,date:v.Z.getDate(c),blockList:y,saveSize:g,rawData:p})}return{gameId:l,freeBlocks:o,slotBlockOccupancy:g,saveFiles:h}}function ie(e){return{totalSlots:Math.floor(e.byteLength/b)}}function oe(e){let t=m.Z.getFilledArrayBuffer(b,R);return t=m.Z.setMagic(t,I,T,N),e.forEach(((e,a)=>{t=m.Z.setString(t,(a+1)*C,e.gameId,M,C)})),t}function le(e){let t=$;const a=e.saveFiles.map((e=>{const a=Math.ceil(e.rawData.byteLength/A),r=t;return t+=a+1,{...e,numDataBlocksNeeded:a,nextSaveBlockNum:t,usedBlocks:d.createSequentialArray(r+1,a)}}));a.length>0&&(a[a.length-1].nextSaveBlockNum=Q);let r=$;a.forEach((e=>{r+=e.numDataBlocksNeeded+1}));const n=Math.floor(b/A),s=n-r;if(s<0)throw new Error(`Not enough space to store ${e.saveFiles.length} saves for the game '${e.gameId}'. Need ${r} blocks but only have ${n} blocks`);const i=d.createSequentialArray(0,r),o=D.createBlockOccupancyBitmap(i,w);let l=m.Z.getFilledArrayBuffer(A,R);l=m.Z.setMagic(l,L,U,k),l=m.Z.setString(l,H,e.gameId,M,C),l=m.Z.setArrayBufferPortion(l,o,P,0,w);const u=new DataView(l);u.setUint32(O,b,E),u.setUint16(V,A,E),u.setUint16(x,s),u.setUint16(G,e.saveFiles.length>0?$:Q);const c=[l];return a.forEach((e=>{const t=D.createBlockOccupancyBitmap(e.usedBlocks,w);let a=m.Z.getFilledArrayBuffer(A,R);a=m.Z.setString(a,Y,e.name,f.Z.ARCHIVE_ENTRY_NAME_ENCODING,f.Z.ARCHIVE_ENTRY_NAME_LENGTH),a=m.Z.setString(a,z,e.comment,f.Z.ARCHIVE_ENTRY_COMMENT_ENCODING,f.Z.ARCHIVE_ENTRY_COMMENT_LENGTH),a=m.Z.setArrayBufferPortion(a,t,J,0,w);const r=new DataView(a);r.setUint32(q,e.rawData.byteLength,E),r.setUint8(j,e.languageCode),r.setUint32(W,e.dateCode,E),r.setUint16(K,e.nextSaveBlockNum,E),c.push(a),c.push(e.rawData),e.rawData.byteLength%A!==0&&c.push(m.Z.getFilledArrayBuffer(A-e.rawData.byteLength%A,R))})),c.push(m.Z.getFilledArrayBuffer(s*A,R)),m.Z.concatArrayBuffers(c)}class ue{static createWithNewSize(){}static gameSaveFilesContainsFile(e,t,a){const r=e.findIndex((e=>e.gameId===t));return!(r<0)&&e[r].saveFiles.findIndex((e=>e.name===a.name))>=0}static gameSaveFilesAreEqual(e,t,a,r){return e===a&&t.name===r.name}static upsertGameSaveFiles(e,t){const a=e.slice(0);return t.forEach((e=>{const t=a.findIndex((t=>t.gameId===e.gameId));t<0?a.push(e):e.saveFiles.forEach((e=>{const r=a[t].saveFiles.findIndex((t=>t.name===e.name));r<0?a[t].saveFiles.push(e):a[t].saveFiles[r]=e}))})),a}static isInternalSarooData(e){try{return ue.createFromSarooData(e),!0}catch(t){return!1}}static createFromSarooData(e){m.Z.checkMagic(e,I,T,N);const t=d.createSequentialArray(Z,B),a=t.findIndex((t=>!X(t,e))),r=a>=0?t.slice(0,a):t,n=r.map((t=>se(t,e))),s=ie(e);return new ue(e,n,s)}static createFromSaveFiles(e){if(e.length>B)throw new Error(`Too many games to fit in file: found ${e.length} different games, but can only store ${B}`);const t=oe(e),a=e.map((e=>le(e))),r=m.Z.concatArrayBuffers([t,...a]),n=ie(r);return new ue(r,e,n)}constructor(e,t,a){this.arrayBuffer=e,this.gameSaveFiles=t,this.saveFiles=t.map((e=>e.saveFiles)).flat(),this.volumeInfo=a}getGameSaveFiles(){return this.gameSaveFiles}getSaveFiles(){return this.saveFiles}getVolumeInfo(){return this.volumeInfo}getArrayBuffer(){return this.arrayBuffer}}const ce=!1,ge=1024,he=8192,Se=0,me=1,de="SaroMems",fe=0,ve="US-ASCII",ye=8,pe=12,Fe=16,De=ge-Fe,Ee=8*De,Te=ge,Ie=7,Ne=0,be=14,Ae=16,we=Ie*ge/Ae,Ce=0,Me=12,Ze=16,_e=27,Be=28,Re=64,Ue=2,Le=0,ke=ge-Re,Oe=ke/Ue-1,Ve=me+Ie;function xe(){return m.Z.getFilledArrayBuffer(ge,Se)}function He(e){const t=D.createBlockOccupancyBitmap(e.usedBlocks,De);let a=xe();a=m.Z.setMagic(a,fe,de,ve),a=m.Z.setArrayBufferPortion(a,t,Fe,0,De);const r=new DataView(a);return r.setUint32(ye,e.totalSize,ce),r.setUint16(pe,e.numFreeBlocks,ce),a}function Ge(e,t){let a=m.Z.getFilledArrayBuffer(Ae,Se);a=m.Z.setString(a,Ne,e.name,f.Z.ARCHIVE_ENTRY_NAME_ENCODING,f.Z.ARCHIVE_ENTRY_NAME_LENGTH);const r=new DataView(a);return r.setUint16(be,t,ce),a}function Pe(e){let t=Ve;const a=e.map((e=>{const a=t;return t+=e.blockList.length,Ge(e,a)})),r=(we-a.length)*Ae;if(r>0){const e=m.Z.getFilledArrayBuffer(r,Se);return m.Z.concatArrayBuffers([...a,e])}return m.Z.concatArrayBuffers(a)}function $e(e,t){let a=xe();a=m.Z.setString(a,Ce,e.name,f.Z.ARCHIVE_ENTRY_NAME_ENCODING,f.Z.ARCHIVE_ENTRY_NAME_LENGTH),a=m.Z.setString(a,Ze,e.comment,f.Z.ARCHIVE_ENTRY_COMMENT_ENCODING,f.Z.ARCHIVE_ENTRY_COMMENT_LENGTH);const r=new DataView(a);r.setUint32(Me,e.rawData.byteLength,ce),r.setUint8(_e,e.languageCode),r.setUint32(Be,e.dateCode,ce);const n=[];if(e.rawData.byteLength<=ke)a=m.Z.setArrayBufferPortion(a,e.rawData,Re,0,e.rawData.byteLength),n.push(a);else{const s=Math.ceil(e.rawData.byteLength/ge);if(s>Oe)throw new Error(`Not enough space to store file ${e.name} - ${e.comment}: requires ${s} but the maximum is ${Oe}`);for(let e=0;e<s;e+=1){const a=Re+Ue*e;r.setUint16(a,t+1+e,ce)}const i=Re+Ue*s;r.setUint16(i,Le,ce),n.push(a);let o=e.rawData;if(e.rawData%ge!==0){const t=ge-e.rawData.byteLength%ge;o=m.Z.concatArrayBuffers([o,m.Z.getFilledArrayBuffer(t,Se)])}for(let e=0;e<s;e+=1){const t=e*ge;n.push(o.slice(t,t+ge))}}return{...e,blockList:n}}function Ye(e,t){return e.slice(t*ge,(t+1)*ge)}function qe(e){return e.slice(Te,Te+Ie*ge)}function ze(e){const t=qe(e),a=new Uint8Array(t),r=d.createSequentialArray(0,we);return r.filter((e=>0!==a[e*Ae]))}function je(e,t){const a=qe(e),r=new DataView(a),n=new Uint8Array(a),s=t*Ae,i=m.Z.readNullTerminatedString(n,s+Ne,f.Z.ARCHIVE_ENTRY_NAME_ENCODING,f.Z.ARCHIVE_ENTRY_NAME_LENGTH),o=r.getUint16(s+be),l=Ye(e,o),u=new DataView(l),c=new Uint8Array(l),g=m.Z.readNullTerminatedString(c,Ce,f.Z.ARCHIVE_ENTRY_NAME_ENCODING,f.Z.ARCHIVE_ENTRY_NAME_LENGTH),h=m.Z.readNullTerminatedString(c,Ze,f.Z.ARCHIVE_ENTRY_COMMENT_ENCODING,f.Z.ARCHIVE_ENTRY_COMMENT_LENGTH),S=u.getUint32(Me,ce),d=u.getUint8(_e),y=u.getUint32(Be,ce);if(g!==i)throw new Error(`File appears to be corrupt: found directory entry with name ${i} but the corresponding archive entry has name ${g}`);const p=[];let F=null;if(S<=ke)F=l.slice(Re,Re+S);else{let t=Re,a=u.getUint16(t);while(a!==Le)p.push(a),t+=Ue,a=u.getUint16(t);const r=p.map((t=>Ye(e,t)));F=m.Z.concatArrayBuffers(r).slice(0,S)}return{name:g,languageCode:d,language:v.Z.getLanguageString(d),comment:h,dateCode:y,date:v.Z.getDate(y),blockList:p,saveSize:S,rawData:F}}class We{static createWithNewSize(){}static saveFilesContainsFile(e,t){return e.findIndex((e=>We.saveFilesAreEqual(e,t)))>=0}static saveFilesAreEqual(e,t){return e.name===t.name}static upsertGameSaveFiles(e,t){const a=e.slice(0);return t.forEach((e=>{const t=a.findIndex((t=>We.saveFilesAreEqual(t,e)));t<0?a.push(e):a[t]=e})),a}static isCartSarooData(e){try{return We.createFromSarooData(e),!0}catch(t){return!1}}static createFromSarooData(e){const t=new DataView(e);m.Z.checkMagic(e,fe,de,ve);const a=t.getUint32(ye,ce),r=t.getUint16(pe,ce),n=e.slice(Fe,Fe+De),{usedBlocks:s}=D.getBlockOccupancy(n,a,ge),i=ze(e),o=i.map((t=>je(e,t))),l={totalSize:a,numFreeBlocks:r,numUsedBlocks:s.length,usedBlocks:s};return new We(e,o,l)}static createFromSaveFiles(e){if(e.length>we)throw new Error(`Not enough space to hold all saves. Requires ${e.length} saves, but directory only has room for ${we} saves`);let t=Ve;const a=e.map((e=>{const a=$e(e,t);return t+=a.blockList.length,a})),r=a.map((e=>e.blockList)),n=m.Z.concatArrayBuffers(r.flat()),s=Pe(a),i=Ve+r.flat().length,o=d.createSequentialArray(0,i);if(i>Ee)throw new Error(`Not enough space to hold all saves. Requires ${i} but we only have ${Ee} of space`);const l={totalSize:he*ge,numFreeBlocks:Ee-i,numUsedBlocks:i,usedBlocks:o},u=He(l),c=m.Z.getFilledArrayBuffer((he-i)*ge,Se),g=m.Z.concatArrayBuffers([u,s,n,c]);return new We(g,e,l)}constructor(e,t,a){this.arrayBuffer=e,this.saveFiles=t,this.volumeInfo=a}getSaveFiles(){return this.saveFiles}getVolumeInfo(){return this.volumeInfo}getArrayBuffer(){return this.arrayBuffer}}var Ke=a(4230);const Je=255;class Qe{static createWithNewSize(){}static isSystemSarooData(e){try{return Qe.createFromSarooData(e),!0}catch(t){return!1}}static createFromSarooData(e){const t=Ke.Z.byteCollapse(e);return f.Z.createFromSegaSaturnData(t)}static createFromSaveFiles(e){const t=f.Z.createFromSaveFiles(e,f.Z.INTERNAL_BLOCK_SIZE);return new f.Z(Ke.Z.byteExpand(t.getArrayBuffer(),Je),t.getSaveFiles(),t.getVolumeInfo())}}const Xe="SEGA SEGASATURN ",et=16,tt="US-ASCII",at=48,rt=16,nt="US-ASCII";class st{constructor(e){m.Z.checkMagic(e,et,Xe,tt);const t=new Uint8Array(e);this.gameId=m.Z.readNullTerminatedString(t,at,nt,rt)}getGameId(){return this.gameId}static getFileExtensions(){return[".bin"]}}function it(e){return{displayText:`${e.name} - ${e.comment}`}}function ot(e,t,a){return e.reduce(((e,r)=>{const n=r.saveFiles.map((e=>{const n=it(e);return ue.gameSaveFilesContainsFile(t,r.gameId,e)&&(n.displayColour=a),n}));return[...e,...n]}),[])}function lt(e,t,a){return e.map((e=>{const r=it(e);return We.saveFilesContainsFile(t,e)&&(r.displayColour=a),r}))}function ut(e){return null!==e?e.map((e=>it(e))):[]}function ct(e){return null!==e?ut(e.getSaveFiles()):[]}var gt={name:"ConvertSegaSaturnSaroo",data(){return{segaSaturnSaveData:null,segaSaturnSaveDataToMergeInto:null,bupsArray:null,saveFiles:null,errorMessage:null,inputFilename:null,outputFilename:null,conversionDirection:"convertToRaw",segaCdSaveType:"internal-memory",selectedSaveData:null,saturnRomData:null,saturnRomErrorMessage:null,saveDataToMergeIntoErrorMessage:null}},components:{ConversionDirection:c.Z,InputFile:l.Z,OutputFilename:u.Z,FileList:g.Z,SegaCdSaveTypeSelector:h.Z},computed:{convertButtonDisabled(){const e="convertToRaw"===this.conversionDirection||null===this.selectedSaveData;return!this.segaSaturnSaveData||0===this.segaSaturnSaveData.getSaveFiles().length||!e||!this.outputFilename||!this.hasSaturnRomDataIfNeeded},needsSaturnRomData(){return"convertToFormat"===this.conversionDirection&&"internal-memory"===this.segaCdSaveType},hasSaturnRomDataIfNeeded(){return!this.needsSaturnRomData||null!==this.saturnRomData}},methods:{getGameSaveFiles(){return null===this.saturnRomData||null===this.saveFiles?[]:[{gameId:this.saturnRomData.getGameId(),saveFiles:this.saveFiles}]},hasAllDataToShowOverriddenFiles(){const e=null!==this.saveFiles&&null!==this.segaSaturnSaveDataToMergeInto;return"internal-memory"===this.segaCdSaveType?e&&null!==this.saturnRomData:e},getSarooSaveDataFileListEntries(){return ct(this.segaSaturnSaveData)},getIndividualFileListEntries(){return this.hasAllDataToShowOverriddenFiles()?"internal-memory"===this.segaCdSaveType?ot(this.getGameSaveFiles(),this.segaSaturnSaveDataToMergeInto.getGameSaveFiles(),"green"):lt(this.saveFiles,this.segaSaturnSaveDataToMergeInto.getSaveFiles(),"green"):ut(this.saveFiles)},getSaveDataToMergeInfoFileListEntries(){return this.hasAllDataToShowOverriddenFiles()?"internal-memory"===this.segaCdSaveType?ot(this.segaSaturnSaveDataToMergeInto.getGameSaveFiles(),this.getGameSaveFiles(),"red"):lt(this.segaSaturnSaveDataToMergeInto.getSaveFiles(),this.saveFiles,"red"):ct(this.segaSaturnSaveDataToMergeInto)},changeConversionDirection(e){this.conversionDirection=e,this.segaSaturnSaveData=null,this.segaSaturnSaveDataToMergeInto=null,this.bupsArray=null,this.saveFiles=null,this.errorMessage=null,this.saveDataToMergeIntoErrorMessage=null,this.inputFilename=null,this.outputFilename=null,this.selectedSaveData=null,this.segaCdSaveType="internal-memory",this.saturnRomData=null,this.saturnRomErrorMessage=null,this.setOutputFilename()},changeSelectedSaveData(e){this.segaSaturnSaveData.getSaveFiles().length>0?(this.selectedSaveData=e,this.outputFilename=`${this.segaSaturnSaveData.getSaveFiles()[this.selectedSaveData].name}.BUP`):(this.selectedSaveData=null,this.outputFilename=null)},setOutputFilename(){"convertToFormat"===this.conversionDirection&&("internal-memory"===this.segaCdSaveType?this.outputFilename="SS_SAVE.BIN":this.outputFilename="SS_MEMS.BIN")},changeSegaCdSaveType(e){this.segaCdSaveType!==e&&(this.segaCdSaveType=e,this.saturnRomData=null,this.segaSaturnSaveData=null,this.errorMessage=null,this.segaSaturnSaveDataToMergeInto=null,this.saveDataToMergeIntoErrorMessage=null,this.$refs.inputFileSaturnRomData&&this.$refs.inputFileSaturnRomData.reset(),this.$refs.inputFileToMergeInfo&&this.$refs.inputFileToMergeInfo.reset(),this.tryToCreateSegaSaturnSaveDataFromSaveFiles(),this.setOutputFilename())},readSaturnRom(e){this.saturnRomErrorMessage=null;try{this.saturnRomData=new st(e.arrayBuffer),this.tryToCreateSegaSaturnSaveDataFromSaveFiles()}catch(t){this.saturnRomErrorMessage="This does not appear to be track 1 of a Sega Saturn game in .cue/.bin format",this.saturnRomData=null}},readSegaSaturnSaveData(e){if(null!==this.segaCdSaveType){this.errorMessage=null,this.selectedSaveData=null,this.inputFilename=e.filename;try{if(ue.isInternalSarooData(e.arrayBuffer))this.segaSaturnSaveData=ue.createFromSarooData(e.arrayBuffer);else if(We.isCartSarooData(e.arrayBuffer))this.segaSaturnSaveData=We.createFromSarooData(e.arrayBuffer);else{if(!Qe.isSystemSarooData(e.arrayBuffer))throw new Error("Could not find a matching Saroo file type");this.segaSaturnSaveData=Qe.createFromSarooData(e.arrayBuffer)}this.bupsArray=S.Z.convertSaveFilesToBups(this.segaSaturnSaveData.getSaveFiles()),this.changeSelectedSaveData(0)}catch(t){this.errorMessage="File appears to not be in the correct format",this.segaSaturnSaveData=null,this.bupsArray=null,this.saveFiles=null,this.selectedSaveData=null}}},readSaveDataToMergeInfo(e){if(null!==this.segaCdSaveType)if(this.saveDataToMergeIntoErrorMessage=null,"internal-memory"===this.segaCdSaveType)try{this.segaSaturnSaveDataToMergeInto=ue.createFromSarooData(e.arrayBuffer),this.tryToCreateSegaSaturnSaveDataFromSaveFiles()}catch(t){this.saveDataToMergeIntoErrorMessage="You can only merge saves from an internal memory save file (SS_SAVE.BIN) when creating a new internal memory file",this.segaSaturnSaveDataToMergeInto=null}else try{this.segaSaturnSaveDataToMergeInto=We.createFromSarooData(e.arrayBuffer),this.tryToCreateSegaSaturnSaveDataFromSaveFiles()}catch(t){this.saveDataToMergeIntoErrorMessage="You can only merge saves from a backup cartridge save file (SS_MEMS.BIN) when creating a new backup cartridge file",this.segaSaturnSaveDataToMergeInto=null}},readIndividualFileSaveData(e){this.errorMessage=null,this.selectedSaveData=null,this.inputFilename=null;try{this.bupsArray=e.map((e=>e.arrayBuffer)),this.saveFiles=S.Z.convertBupsToSaveFiles(this.bupsArray),this.tryToCreateSegaSaturnSaveDataFromSaveFiles()}catch(t){this.errorMessage=t.message,this.segaSaturnSaveData=null,this.bupsArray=null,this.saveFiles=null,this.selectedSaveData=null}},tryToCreateSegaSaturnSaveDataFromSaveFiles(){if(null!==this.saveFiles&&this.hasSaturnRomDataIfNeeded){this.errorMessage=null,this.selectedSaveData=null,this.inputFilename=null;try{if("internal-memory"===this.segaCdSaveType){const e=this.getGameSaveFiles();let t=e;null!==this.segaSaturnSaveDataToMergeInto&&(t=ue.upsertGameSaveFiles(this.segaSaturnSaveDataToMergeInto.getGameSaveFiles(),e)),this.segaSaturnSaveData=ue.createFromSaveFiles(t)}else{let e=this.saveFiles;null!==this.segaSaturnSaveDataToMergeInto&&(e=We.upsertGameSaveFiles(this.segaSaturnSaveDataToMergeInto.getSaveFiles(),this.saveFiles)),this.segaSaturnSaveData=We.createFromSaveFiles(e)}}catch(e){this.errorMessage=e.message,this.segaSaturnSaveData=null,this.selectedSaveData=null,this.outputFilename=null}}},convertFile(){let e=null;e="convertToRaw"===this.conversionDirection?this.bupsArray[this.selectedSaveData]:this.segaSaturnSaveData.getArrayBuffer();const t=new Blob([e],{type:"application/octet-stream"});(0,o.saveAs)(t,this.outputFilename)}}},ht=gt,St=a(1001),mt=(0,St.Z)(ht,s,i,!1,null,"bb995e00",null),dt=mt.exports,ft={name:"SegaSaturnSarooView",components:{ConvertSegaSaturnSaroo:dt}},vt=ft,yt=(0,St.Z)(vt,r,n,!1,null,null,null),pt=yt.exports},5451:function(e,t,a){a.d(t,{Z:function(){return F}});a(3408),a(4590),a(3462),a(3767),a(8585),a(8696);var r=a(1165),n=a(7313),s=a(3313);const i=!1,o=64,l="Vmem",u=0,c="US-ASCII",g=4,h=16,S=r.Z.ARCHIVE_ENTRY_NAME_LENGTH+1,m=28,d=r.Z.ARCHIVE_ENTRY_COMMENT_LENGTH+1,f=39,v=40,y=44,p=52;class F{static convertSaveFilesToBups(e){return e.map(((e,t)=>{let a=s.Z.getFilledArrayBuffer(o,0);a=s.Z.setMagic(a,u,l,c),a=s.Z.setString(a,h,e.name,r.Z.ARCHIVE_ENTRY_NAME_ENCODING,S-1),a=s.Z.setString(a,m,e.comment,r.Z.ARCHIVE_ENTRY_COMMENT_ENCODING,d-1);const n=new DataView(a);return n.setUint32(g,t,i),n.setUint8(f,e.languageCode),n.setUint32(v,e.dateCode,i),n.setUint32(y,e.saveSize,i),n.setUint32(p,e.dateCode,i),s.Z.concatArrayBuffers([a,e.rawData])}))}static convertBupsToSaveFiles(e){return e.map((e=>{const t=e.slice(0,o),a=new DataView(t),g=new Uint8Array(t),F=e.slice(o);try{s.Z.checkMagic(t,u,l,c)}catch(b){throw new Error("This does not appear to be a Sega Saturn save file in .BUP format")}const D=a.getUint8(f),E=a.getUint32(v,i),T=a.getUint32(p,i),I=a.getUint32(y,i),N=0!==E?E:T;if(I!==F.byteLength)throw new Error(`Specified save size of ${I} bytes does not match actual save size of ${F.byteLength} bytes`);return{name:s.Z.readNullTerminatedString(g,h,r.Z.ARCHIVE_ENTRY_NAME_ENCODING,S-1),languageCode:D,language:n.Z.getLanguageString(D),comment:s.Z.readNullTerminatedString(g,m,r.Z.ARCHIVE_ENTRY_COMMENT_ENCODING,d-1),dateCode:N,date:n.Z.getDate(N),saveSize:I,rawData:F}}))}}},7978:function(e,t,a){function r(e){let t=0,a=e;while(0!==a)a>>=1,t+=1;return t}a.d(t,{Z:function(){return n}});class n{static getNextLargestPowerOf2(e){return e<=0?0:n.isPowerOf2(e)?e:1<<r(e)}static getNextSmallestPowerOf2(e){return e<=0?0:n.isPowerOf2(e)?e:1<<r(e)-1}static isPowerOf2(e){return!(e<=0)&&0===(e&e-1)}static getNextMultipleOf16(e){return e<=0?0:e+15>>>4<<4}static roundUpToNearest64Bytes(e){return e<0?0:e+63>>>6<<6}}},2976:function(e,t,a){a.d(t,{Z:function(){return s}});a(3408),a(4590),a(3462),a(3767),a(8585),a(8696);var r=a(7978);function n(e,t){const a=e.byteLength-t,n=r.Z.getNextLargestPowerOf2(a);return t-(n-a)}class s{static attemptFix(e,t){const a=s.getPadFromStartValueAndCount(e),r=s.getPadFromStartValueAndCount(t),n=s.removePaddingFromStart(e,a.count),i=s.removePaddingFromStart(t,r.count);let o=i;if(i.byteLength<n.byteLength){const e={value:0,count:n.byteLength-i.byteLength};o=s.addPaddingToEnd(i,e)}else i.byteLength>n.byteLength&&(o=s.removePaddingFromEnd(i,i.byteLength-n.byteLength));const l=s.addPaddingToStart(o,a);return l}static fileSizeAndPaddingFromStartIsSame(e,t){if(e.byteLength!==t.byteLength)return!1;const a=s.getPadFromStartValueAndCount(e),r=s.getPadFromStartValueAndCount(t);return a.count===r.count&&a.value===r.value}static getPadFromStartValueAndCount(e){const t=s.countPaddingFromStart(e,0),a=s.countPaddingFromStart(e,255);let r=0,i=t;return a>0&&(r=255,i=a),i=n(e,i),{value:r,count:i}}static getPadFromEndValueAndCount(e){const t=s.countPaddingFromEnd(e,0),a=s.countPaddingFromEnd(e,255);let r=0,i=t;return a>0&&(r=255,i=a),i=n(e,i),{value:r,count:i}}static removePaddingFromStart(e,t){return e.slice(t)}static removePaddingFromEnd(e,t){return e.slice(0,e.byteLength-t)}static addPaddingToStart(e,t){const a=new ArrayBuffer(e.byteLength+t.count),r=new Uint8Array(a),n=new Uint8Array(e);for(let s=0;s<t.count;s+=1)r[s]=t.value;return r.set(n,t.count),a}static addPaddingToEnd(e,t){const a=new ArrayBuffer(e.byteLength+t.count),r=new Uint8Array(a),n=new Uint8Array(e);r.set(n,0);for(let s=0;s<t.count;s+=1)r[e.byteLength+s]=t.value;return a}static padAtEndToMinimumSize(e,t,a){return s.addPaddingToEnd(e,{value:t,count:Math.max(a-e.byteLength,0)})}static countPaddingFromStart(e,t){const a=new Uint8Array(e);let r=0;for(let n=0;n<a.length;n+=1){if(a[n]!==t)break;r+=1}return r===e.byteLength&&(r=0),r}static countPaddingFromEnd(e,t){const a=new Uint8Array(e);let r=0;for(let n=a.length-1;n>=0;n-=1){if(a[n]!==t)break;r+=1}return r===e.byteLength&&(r=0),r}}},7327:function(e,t,a){function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function n(e,t){if("object"!==r(e)||null===e)return e;var a=e[Symbol.toPrimitive];if(void 0!==a){var n=a.call(e,t||"default");if("object"!==r(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}function s(e){var t=n(e,"string");return"symbol"===r(t)?t:String(t)}function i(e,t,a){return t=s(t),t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}a.d(t,{Z:function(){return i}})}}]);