"use strict";(self["webpackChunksave_file_converter"]=self["webpackChunksave_file_converter"]||[]).push([[151],{2074:function(e,t,a){a.d(t,{Z:function(){return u}});var r=function(){var e=this,t=e._self._c;return t("b-form-group",{scopedSlots:e._u([{key:"default",fn:function({ariaDescribedby:a}){return[t("b-form-radio-group",{staticClass:"radio-buttons",attrs:{options:e.options,"aria-describedby":a,buttons:"","button-variant":"outline-info"},model:{value:e.valueLocal,callback:function(t){e.valueLocal=t},expression:"valueLocal"}})]}}])})},n=[],i={name:"IndividualSavesOrMemoryCardSelector",props:{value:{type:String,default:null},individualSavesText:{type:String,default:"Individual saves"},memoryCardText:{type:String,default:"Memory card"}},model:{prop:"value",event:"change"},computed:{valueLocal:{get(){return this.value},set(e){this.$emit("change",e)}}},data(){return{options:[{value:"individual-saves",text:this.individualSavesText},{value:"memory-card",text:this.memoryCardText}]}}},s=i,o=a(1001),l=(0,o.Z)(s,r,n,!1,null,"725c0d84",null),u=l.exports},5151:function(e,t,a){a.d(t,{Z:function(){return d}});var r=function(){var e=this,t=e._self._c;return t("b-row",{attrs:{"no-gutters":"","align-h":"start","align-v":"center"}},[t("b-col",{attrs:{cols:"11",sm:"12"}},[t("div",[t("b-form-select",{attrs:{value:e.value,options:e.options},on:{input:function(t){return e.$emit("input",t)}}}),t("help-button",{staticClass:"help-button",attrs:{"popover-text":null!==this.overrideHelpText?this.overrideHelpText:"Some cartridges, flash carts, or emulators may not accept saves of a particular size for a particular game.           Try creating a test save with your cartridge, flash cart, or emulator to find what size it expects, then adjust the value here if necessary.",id:this.id}})],1)])],1)},n=[],i=a(7900),s=a(2137),o={name:"OutputFilesize",props:{value:{type:Number,default:null},id:{type:String,default:null},platform:{type:String,default:null},valuesToRemove:{type:Array,default:()=>[]},overrideHelpText:{type:String,default:null}},components:{HelpButton:i.Z},methods:{getDropdownText(e){let t=null;switch(e){case 64:t="0.06";break;case 128:t="0.1";break;case 256:t="0.25";break;default:t=(e/1024).toFixed(e<1024?1:0);break}return`${t}kB (${e} bytes)`}},computed:{options(){if(null===this.platform)return[];const e=s.Z[this.platform].filter((e=>this.valuesToRemove.indexOf(e)<0));return[{value:null,text:"Output file size",disabled:!0}].concat(e.map((e=>({value:e,text:this.getDropdownText(e)}))))}}},l=o,u=a(1001),c=(0,u.Z)(l,r,n,!1,null,"266011e0",null),d=c.exports},8509:function(e,t,a){a.d(t,{Z:function(){return u}});var r=function(){var e=this,t=e._self._c;return t("b-form-group",{scopedSlots:e._u([{key:"default",fn:function({ariaDescribedby:a}){return[t("b-form-radio-group",{staticClass:"radio-buttons",attrs:{options:e.options,"aria-describedby":a,buttons:"","button-variant":"outline-info"},model:{value:e.valueLocal,callback:function(t){e.valueLocal=t},expression:"valueLocal"}})]}}])})},n=[],i={name:"SegaCdSaveTypeSelector",props:{value:{type:String,default:null},internalMemoryText:{type:String,default:"Internal memory"},ramCartText:{type:String,default:"RAM cartridge"}},model:{prop:"value",event:"change"},computed:{valueLocal:{get(){return this.value},set(e){this.$emit("change",e)}}},watch:{ramCartText:{immediate:!0,handler(e){this.options=[{value:"internal-memory",text:this.internalMemoryText},{value:"ram-cart",text:e}]}}},data(){return{options:null}}},s=i,o=a(1001),l=(0,o.Z)(s,r,n,!1,null,"f325f81e",null),u=l.exports},7225:function(e,t,a){a.r(t),a.d(t,{default:function(){return ke}});var r=function(){var e=this,t=e._self._c;return t("div",{staticClass:"home"},[t("ConvertSegaCd")],1)},n=[],i=function(){var e=this,t=e._self._c;return t("div",[t("b-container",[t("b-row",{attrs:{"no-gutters":"","align-h":"center","align-v":"start"}},[t("b-col",{attrs:{sm:"12",md:"5","align-self":"start"}},[t("b-row",{attrs:{"no-gutters":"","align-h":"center","align-v":"start"}},[t("b-col",{attrs:{cols:"12"}},[t("b-jumbotron",{attrs:{fluid:"","header-level":e._f("mq")(e.$mq,{xs:5,sm:5,md:5,lg:5,xl:4})},scopedSlots:e._u([{key:"header",fn:function(){return[e._v("Raw/emulator")]},proxy:!0}])})],1)],1),"convertToRaw"===this.conversionDirection?t("div",[t("input-file",{attrs:{errorMessage:this.errorMessage,placeholderText:"Choose a file to convert",leaveRoomForHelpIcon:!1},on:{load:function(t){return e.readSegaCdSaveData(t)}}}),t("file-list",{attrs:{display:null!==this.segaCdSaveDataLargest,files:this.getFileListNames()},on:{change:function(t){return e.changeSelectedSaveData(t)}},model:{value:e.selectedSaveData,callback:function(t){e.selectedSaveData=t},expression:"selectedSaveData"}})],1):t("div",[t("output-filename",{attrs:{leaveRoomForHelpIcon:!1},model:{value:e.outputFilename,callback:function(t){e.outputFilename=t},expression:"outputFilename"}}),t("sega-cd-save-type-selector",{attrs:{value:this.segaCdSaveType},on:{change:function(t){return e.changeSegaCdSaveType(t)}}}),"ram-cart"===this.segaCdSaveType?t("div",[t("output-filesize",{staticClass:"output-filesize",attrs:{value:this.outputFilesize,platform:"segacd","values-to-remove":[this.internalSaveSize]},on:{input:function(t){return e.changeOutputFilesize(t)}}})],1):e._e()],1)],1),t("b-col",{attrs:{sm:"12",md:"2",lg:"2",xl:"2","align-self":"start"}},[t("conversion-direction",{attrs:{horizontalLayout:["md","lg","xl"],verticalLayout:["xs","sm"],conversionDirection:this.conversionDirection},on:{change:function(t){return e.changeConversionDirection(t)}}})],1),t("b-col",{attrs:{sm:"12",md:"5","align-self":"start"}},[t("b-row",{attrs:{"no-gutters":"","align-h":"center","align-v":"start"}},[t("b-col",{attrs:{cols:"12"}},[t("b-jumbotron",{class:"md"===e.$mq&&"individual-saves"===this.individualSavesOrMemoryCard?"fix-jumbotron":"",attrs:{fluid:"","header-level":e._f("mq")(e.$mq,{xs:5,sm:5,md:5,lg:5,xl:4})},scopedSlots:e._u([{key:"header",fn:function(){return[e._v(e._s(e.individualSavesOrMemoryCardText))]},proxy:!0}])})],1)],1),"convertToRaw"===this.conversionDirection?t("div",["individual-saves"===this.individualSavesOrMemoryCard?t("div",[t("output-filename",{attrs:{leaveRoomForHelpIcon:!0,disabled:!0,helpText:"The filename for an individual save contains important information that the game needs to find this save data. Please do not modify it after downloading the save."},model:{value:e.outputFilename,callback:function(t){e.outputFilename=t},expression:"outputFilename"}})],1):t("div",[t("output-filename",{attrs:{leaveRoomForHelpIcon:!1},model:{value:e.outputFilename,callback:function(t){e.outputFilename=t},expression:"outputFilename"}})],1),t("individual-saves-or-memory-card-selector",{attrs:{value:this.individualSavesOrMemoryCard,individualSavesText:this.individualSavesText,memoryCardText:this.memoryCardText},on:{change:function(t){return e.changeIndividualSavesOrMemoryCard(t)}}}),"memory-card"===this.individualSavesOrMemoryCard?t("div",[t("sega-cd-save-type-selector",{attrs:{value:this.segaCdSaveType},on:{change:function(t){return e.changeSegaCdSaveType(t)}}}),"ram-cart"===this.segaCdSaveType?t("div",[t("output-filesize",{staticClass:"output-filesize",attrs:{value:this.outputFilesize,platform:"segacd","values-to-remove":[this.internalSaveSize]},on:{input:function(t){return e.changeOutputFilesize(t)}}})],1):e._e()],1):e._e()],1):t("div",[t("input-file",{attrs:{errorMessage:this.errorMessage,placeholderText:"Choose files to add",leaveRoomForHelpIcon:!1,allowMultipleFiles:!0},on:{load:function(t){return e.readEmulatorSaveData(t)}}}),t("file-list",{attrs:{display:null!==this.segaCdSaveDataLargest,files:this.getFileListNames(),enabled:!1}})],1)],1)],1),t("b-row",{staticClass:"justify-content-md-center",attrs:{"align-h":"center"}},[t("b-col",{attrs:{cols:"auto",sm:"4",md:"3",lg:"2","align-self":"center"}},[t("b-button",{staticClass:"sega-cd-convert-button",attrs:{variant:"success",block:"",disabled:this.convertButtonDisabled},on:{click:function(t){return e.convertFile()}}},[e._v(" Convert! ")])],1)],1),t("b-row",[t("b-col",[t("div",{staticClass:"help"},[e._v(" Help: how can I "),t("router-link",{attrs:{to:"/original-hardware?sort=segacd"}},[e._v("copy save files to and from a Sega CD console")]),e._v("? ")],1)])],1)],1)],1)},s=[],o=a(3162),l=a(3313),u=a(1044),c=a(2405),d=a(5151),f=a(5482),v=a(1302),g=a(2074),h=a(8509);a(3408),a(4590),a(3462),a(3767),a(8585),a(8696),a(7658);const m=256,y=new Array(m).fill(0);for(let Ie=0;Ie<m;Ie+=1){let e=Ie<<8;for(let t=0;t<8;t+=1)e=e<<1^(0!==(32768&e)?4129:0);y[Ie]=e}function p(e){let t=0;const a=new Uint8Array(e),r=e.byteLength;for(let n=0;n<r;n+=1)t=65535&(t<<8^y[a[n]^t>>8]);return t>>>0}var S=a(2137),b=a(4762);const C=[87,166,113,75,198,25,167,114,76,199,26,1],F=[20,58,56,18,26,6,59,57,19,27,7,1],D=256,w=6,A=[w,w+1],x=A.length,L=w+x;function Z(e,t,a){const r=(1<<t)-1,n=new Array(D).fill(0),i=new Array(D).fill(0);let s=1;for(let o=1;o<=r;o+=1)n[s]=255&o,i[o]=255&s,s=s<<1&4294967295,0!==(s&1<<t)&&(s^=e),s&=r;return{bitsPerSymbol:t,symbolsPerBlock:r,generatorPolynomial:a,galoisFieldIndexOf:n,galoisFieldAlphaTo:i}}const T={8:Z(29,8,C),6:Z(3,6,F)};function z(e){if(e.byteLength!==L)throw new Error(`This Reed-Solomon implementation can only support an input size of ${L} but was given a size of ${e.byteLength}`)}function B(e,t,a){const r=(a+e.generatorPolynomial[t])%e.symbolsPerBlock;return e.galoisFieldAlphaTo[r+1]}class k{static encode(e,t){z(e);const a=T[t],r=l.Z.copyArrayBuffer(e),n=new Uint8Array(r);n[A[0]]=0,n[A[1]]=0;for(let i=0;i<w;i+=1){let e=n[i];0!==e&&(e=a.galoisFieldIndexOf[e]-1,n[A[0]]^=B(a,i,e),n[A[1]]^=B(a,i+w,e))}return r}static decode(e,t){z(e);const a=T[t],r=l.Z.copyArrayBuffer(e),n=new Uint8Array(r);let i=0,s=0;for(let o=0;o<L;o+=1){let e=n[o];i=255&(i^e),0!==e&&(e=(a.galoisFieldIndexOf[e]+w-o)%a.symbolsPerBlock,s=255&(s^a.galoisFieldAlphaTo[e+1]))}if(0!==i){const e=(a.symbolsPerBlock+a.galoisFieldIndexOf[s]-a.galoisFieldIndexOf[i])%a.symbolsPerBlock;if(!(e<L))throw new Error(`Unable to correct error found in data. d: ${e}, errorLocation: ${s}, errorMask: 0x${i.toString(16)}, symbolsPerBlock: ${a.symbolsPerBlock}`);n[L-1-e]^=i}return r}}const I=!1,M=64,E=32,R=0,_=32,O=_/2,N=0,U=11,$=11,P=12,V=14,H=64,j=8,q=H/j,W=2,G=32,J=0,K=W+G,Q=4,X=[45,46,47,8,17,26,35,44],Y="US-ASCII",ee=11,te=11,ae=16;function re(e){return e.replace(/(?!([A-Z]|[0-9]|\*))./g,"_")}function ne(e,t,a){const r=new TextDecoder(Y),n=r.decode(e.slice(t,t+a)),i=re(n);return i.replace(/_*$/g,"")}function ie(e,t){const a=new TextEncoder(Y),r=re(e.toUpperCase()).padEnd(t,"_");return a.encode(r).slice(0,t)}function se(e){const t=new Uint8Array(e);let a=0;const r=new ArrayBuffer(H/2+Q),n=new Uint8Array(r);let i=0;for(let s=0;s<12;s+=1){let e=t[a];a+=1,e<<=6,e=65280&e|t[a],a+=1,n[i]=e>>6,i+=1,e<<=6,e=65280&e|t[a],a+=1,n[i]=e>>4,i+=1,e<<=6,e=65280&e|t[a],a+=1,n[i]=e>>2,i+=1}return r}function oe(e){const t=new Uint8Array(e);let a=0;const r=new ArrayBuffer(H),n=new Uint8Array(r);let i=0;for(let s=0;s<12;s+=1){let e=t[a];a+=1,n[i]=e,i+=1,e<<=8,e|=t[a],a+=1,n[i]=e>>2,i+=1,e<<=8,e|=t[a],a+=1,n[i]=e>>4,i+=1,n[i]=e<<2,i+=1}return r}function le(e,t,a){const r=l.Z.copyArrayBuffer(a),n=new Uint8Array(r),i=new Uint8Array(t);for(let s=0;s<j;s+=1){let t=i[s];for(let a=0;a<j;a+=1){const r=e+a*j;n[r]=n[r]<<1&255|t>>7,t=t<<1&255}}return r}function ue(e,t){const a=l.Z.getFilledArrayBuffer(j,0),r=new Uint8Array(a),n=new Uint8Array(t);for(let i=0;i<j;i+=1){let t=n[e+i*j];for(let e=0;e<j;e+=1)r[e]=r[e]<<1&255|t>>7,t=t<<1&255}return a}function ce(e,t,a){const r=l.Z.copyArrayBuffer(a),n=new Uint8Array(r),i=new Uint8Array(t);for(let s=0;s<5;s+=1)n[e+9*s]=i[s]<<2;return n[X[e]]=i[5]<<2,n[48+e]=i[6]<<2,n[56+e]=i[7]<<2,r}function de(e,t){const a=l.Z.getFilledArrayBuffer(j,0),r=new Uint8Array(a),n=new Uint8Array(t);for(let i=0;i<5;i+=1)r[i]=n[e+9*i]>>2;return r[5]=n[X[e]]>>2,r[6]=n[48+e]>>2,r[7]=n[56+e]>>2,a}function fe(e){let t=l.Z.copyArrayBuffer(e);for(let a=0;a<q;a+=1){const e=ue(a,t),r=k.decode(e,8);t=le(a,r,t)}for(let a=0;a<q;a+=1){const e=de(a,t),r=k.decode(e,6);t=ce(a,r,t)}return t}function ve(e){let t=l.Z.copyArrayBuffer(e);for(let a=0;a<q;a+=1){const e=de(a,t),r=k.encode(e,6);t=ce(a,r,t)}for(let a=0;a<q;a+=1){const e=ue(a,t),r=k.encode(e,8);t=le(a,r,t)}return t}function ge(e){const t=new DataView(e),a=t.getUint16(J,I),r=65535&~t.getUint16(K,I)>>>0,n=p(e.slice(W,W+G));if(n!==a&&n!==r)throw new Error(`Data appears to be corrupt: calculated CRC 0x${n.toString(16)} rather than 0x${a.toString(16)} or 0x${r.toString(16)}`)}function he(e,t){const a=t&-H,r=e.slice(a,a+H);let n=se(r);try{ge(n)}catch(i){const e=fe(r);n=se(e),ge(n)}return n.slice(W+((t^a)>>1),W+G)}function me(e,t,a){if(t.byteLength!==H/2)throw new Error(`Unable to encode block of length ${t.byteLength} bytes, block must be ${H/2} bytes`);const r=p(t);let n=new ArrayBuffer(t.byteLength+Q);const i=new DataView(n);i.setUint16(J,r,I),i.setUint16(K,~r>>>0,I),n=l.Z.setArrayBufferPortion(n,t,J+2,0,t.byteLength);const s=oe(n),o=ve(s);return l.Z.setArrayBufferPortion(e,o,a,0,o.byteLength)}function ye(e,t){const a=[],r=e.byteLength-M;let n=r-_;for(let i=0;i<t;i+=1){const t=he(e,n),r=new DataView(t),i=0!==r.getUint8($),s=r.getUint16(P,I),o=r.getUint16(V,I);let u=null;const c=s*H;if(i){const t=[];let a=c;for(let r=0;r<o;r+=1)t.push(he(e,a)),a+=H;u=l.Z.concatArrayBuffers(t)}else u=e.slice(c,c+o*H);a.push({filename:ne(t,N,U),dataIsEncoded:i,startBlockNumber:s,fileSizeBlocks:o,fileData:u}),n-=_}return a}function pe(e){const t=e.fileData.byteLength,a=e.dataIsEncoded?2*t:t;return Math.ceil(a/H)}function Se(){return l.Z.getFilledArrayBuffer(O,0)}function be(e,t){const a=new ArrayBuffer(O),r=new DataView(a),n=new Uint8Array(a),i=ie(e.filename,U),s=pe(e);return n.set(i,N),r.setUint8($,e.dataIsEncoded?255:0),r.setUint16(P,t,I),r.setUint16(V,s,I),a}function Ce(e,t,a){const r=pe(e);if(e.dataIsEncoded){const n=l.Z.padArrayBuffer(e.fileData,r*H,0);let i=l.Z.copyArrayBuffer(a);for(let e=0;e<r;e+=1){const a=e*(H/2),r=(t+e)*H;i=me(i,n.slice(a,a+H/2),r)}return i}return l.Z.setArrayBufferPortion(a,e.fileData,t*H,0,e.fileData.byteLength)}function Fe(e){return{numFreeBlocks:b.Z.getNumFreeBlocks(e),format:ne(e,e.byteLength-M+E,te),volume:ne(e,e.byteLength-M+R,ee),mediaId:ne(e,e.byteLength-ae,ae)}}class De{static createWithNewSize(e,t){const a=b.Z.resize(e.getArrayBuffer(),t);return De.createFromSegaCdData(a)}static createFromSegaCdData(e){const t=b.Z.truncateToActualSize(e),a=b.Z.getNumFiles(t);let r=ye(t,a);if(t.byteLength<e.byteLength){const a=e.slice(t.byteLength);if(b.Z.isCorrectlyFormatted(a)){const e=b.Z.truncateToActualSize(a),n=b.Z.getNumFiles(e),i=ye(e,n);r=r.concat(i);const s=S.Z.segacd.indexOf(t.byteLength),o=S.Z.segacd.indexOf(e.byteLength),l=Math.min(Math.max(s,o)+1,S.Z.segacd.length-1);return De.createFromSaveFiles(r,S.Z.segacd[l])}}return new De(t,r)}static createFromSaveFiles(e,t){let a=b.Z.makeEmptySave(t);const r=b.Z.getTotalAvailableBlocks(a),n=e.reduce(((e,t)=>e+pe(t)),0),i=Math.ceil(e.length/2),s=e.length%2===0?1:0,o=n+i+s;if(o>r)throw new Error(`The specified save files require a total of ${o} blocks of free space, but Sega CD save data of ${t} bytes only has ${r} free blocks`);let u=1;const c=[],d=[];e.forEach((e=>{const t=pe(e);d.push(be(e,u)),a=Ce(e,u,a),c.push({...e,startBlockNumber:u,fileSizeBlocks:t}),u+=t})),d.length%2===1&&d.push(Se());const f=[];for(let g=0;g<d.length/2;g+=1)f.push(l.Z.concatArrayBuffers([d[2*g+1],d[2*g]]));f.forEach(((e,t)=>{const r=a.byteLength-M-H*(t+1);a=me(a,e,r)}));const v=r-o;return b.Z.setNumFreeBlocks(a,v),b.Z.setNumFiles(a,e.length),new De(a,c)}constructor(e,t){this.arrayBuffer=e,this.saveFiles=t,this.volumeInfo=Fe(e)}getSaveFiles(){return this.saveFiles}getNumFreeBlocks(){return this.volumeInfo.numFreeBlocks}getFormat(){return this.volumeInfo.format}getVolume(){return this.volumeInfo.volume}getMediaId(){return this.volumeInfo.mediaId}getArrayBuffer(){return this.arrayBuffer}}var we={name:"ConvertSegaCd",data(){return{segaCdSaveDataLargest:null,segaCdSaveDataResized:null,errorMessage:null,inputFilename:null,outputFilename:null,outputFilesize:b.Z.INTERNAL_SAVE_SIZE,conversionDirection:"convertToRaw",selectedSaveData:null,segaCdSaveType:"internal-memory",individualSavesOrMemoryCard:"memory-card",individualSavesText:"Individual saves",memoryCardText:"Raw/emulator"}},components:{ConversionDirection:f.Z,InputFile:u.Z,OutputFilename:c.Z,OutputFilesize:d.Z,FileList:v.Z,IndividualSavesOrMemoryCardSelector:g.Z,SegaCdSaveTypeSelector:h.Z},computed:{convertButtonDisabled(){const e="convertToRaw"===this.conversionDirection||null===this.selectedSaveData,t="individual-saves"===this.individualSavesOrMemoryCard?this.segaCdSaveDataLargest:this.segaCdSaveDataResized;return!t||0===t.getSaveFiles().length||!e||!this.outputFilename},individualSavesOrMemoryCardText(){return"individual-saves"===this.individualSavesOrMemoryCard?this.individualSavesText:this.memoryCardText},internalSaveSize(){return b.Z.INTERNAL_SAVE_SIZE},largestRamCartSaveSize(){return S.Z.segacd.at(-1)},smallestRamCartSaveSize(){return S.Z.segacd[1]}},methods:{getFileNameFromSaveFile(e){return`${e.filename}-${e.dataIsEncoded?"ECC":"RAW"}.bin`},getSaveFileFromFileName(e){const t=e.indexOf("-RAW"),a=e.indexOf("-ECC");if(t<0===a<0)throw new Error("This does not appear to be the filename of a Sega CD individual save");return{filename:e.slice(0,Math.max(t,a)),dataIsEncoded:a>=0}},getFileSizeErrorMessage(){let e=null;return e="internal-memory"===this.segaCdSaveType?"The Sega CD internal memory":`A Sega CD RAM cart of size ${this.outputFilesize/1024}kB`,`${e} is not large enough to contain all of the files specified`},getSegaCdDataResized(){if(this.segaCdSaveDataResized=null,null!==this.segaCdSaveDataLargest)try{this.segaCdSaveDataResized=De.createWithNewSize(this.segaCdSaveDataLargest,this.outputFilesize)}catch(e){this.errorMessage=this.getFileSizeErrorMessage(),this.segaCdSaveDataResized=null,this.selectedSaveData=null}},changeSegaCdSaveType(e){this.segaCdSaveType!==e&&(this.segaCdSaveType=e,"internal-memory"===e?this.outputFilesize=this.internalSaveSize:null!==this.segaCdSaveDataLargest?this.outputFilesize=l.Z.clampValue(this.segaCdSaveDataLargest.getArrayBuffer().byteLength,this.smallestRamCartSaveSize,this.largestRamCartSaveSize):this.outputFilesize=this.largestRamCartSaveSize,this.changeOutputFilesize(this.outputFilesize))},changeOutputFilesize(e){this.outputFilesize=e,this.errorMessage=null,this.segaCdSaveType=e===b.Z.INTERNAL_SAVE_SIZE?"internal-memory":"ram-cart",this.getSegaCdDataResized()},changeIndividualSavesOrMemoryCard(e){this.errorMessage=null,this.individualSavesOrMemoryCard!==e&&(this.individualSavesOrMemoryCard=e,"individual-saves"===e?null===this.selectedSaveData&&this.changeSelectedSaveData(0):(null!==this.inputFilename&&(this.outputFilename=l.Z.changeFilenameExtension(this.inputFilename,"brm")),this.selectedSaveData=null,this.getSegaCdDataResized()))},getFileListNames(){return null!==this.segaCdSaveDataLargest&&null!==this.segaCdSaveDataLargest.getSaveFiles()?this.segaCdSaveDataLargest.getSaveFiles().map((e=>({displayText:`${e.filename}`}))):[]},changeConversionDirection(e){this.conversionDirection=e,this.segaCdSaveDataLargest=null,this.segaCdSaveDataResized=null,this.errorMessage=null,this.inputFilename=null,this.outputFilename=null,this.outputFilesize=b.Z.INTERNAL_SAVE_SIZE,this.selectedSaveData=null,this.individualSavesOrMemoryCard="memory-card",this.segaCdSaveType="internal-memory"},changeSelectedSaveData(e){null!==e&&(null!==this.segaCdSaveDataLargest&&this.segaCdSaveDataLargest.getSaveFiles().length>0?(this.selectedSaveData=e,this.outputFilename=this.getFileNameFromSaveFile(this.segaCdSaveDataLargest.getSaveFiles()[this.selectedSaveData]),this.changeIndividualSavesOrMemoryCard("individual-saves")):(this.selectedSaveData=null,this.outputFilename=null))},readSegaCdSaveData(e){this.errorMessage=null,this.selectedSaveData=null,this.inputFilename=e.filename;try{this.segaCdSaveDataLargest=De.createFromSegaCdData(e.arrayBuffer),this.individualSavesOrMemoryCard=null,this.changeIndividualSavesOrMemoryCard("memory-card"),this.changeOutputFilesize(this.segaCdSaveDataLargest.getArrayBuffer().byteLength),this.getSegaCdDataResized()}catch(t){this.errorMessage="File appears to not be in the correct format",this.segaCdSaveDataLargest=null,this.segaCdSaveDataResized=null,this.selectedSaveData=null}},readEmulatorSaveData(e){this.errorMessage=null,this.selectedSaveData=null,this.inputFilename=null;try{const t=e.map((e=>({...this.getSaveFileFromFileName(e.filename),fileData:e.arrayBuffer})));this.segaCdSaveDataLargest=De.createFromSaveFiles(t,this.largestRamCartSaveSize),this.segaCdSaveDataLargest.getSaveFiles().length>0?this.outputFilename=`${l.Z.convertDescriptionToFilename(this.segaCdSaveDataLargest.getSaveFiles()[0].filename)}.brm`:this.outputFilename="output.brm",this.getSegaCdDataResized()}catch(t){this.errorMessage=t.message,this.segaCdSaveDataLargest=null,this.selectedSaveData=null}},convertFile(){let e=null;e="convertToRaw"===this.conversionDirection&&"individual-saves"===this.individualSavesOrMemoryCard?this.segaCdSaveDataLargest.getSaveFiles()[this.selectedSaveData].fileData:this.segaCdSaveDataResized.getArrayBuffer();const t=new Blob([e],{type:"application/octet-stream"});(0,o.saveAs)(t,this.outputFilename)}}},Ae=we,xe=a(1001),Le=(0,xe.Z)(Ae,i,s,!1,null,"175868ec",null),Ze=Le.exports,Te={name:"SegaCdView",components:{ConvertSegaCd:Ze}},ze=Te,Be=(0,xe.Z)(ze,r,n,!1,null,null,null),ke=Be.exports},2137:function(e,t,a){a(7658);const r={nes:[512,1024,2048,4096,8192,16384,32768,65536,131072],snes:[512,1024,2048,4096,8192,16384,32768,65536,131072],n64:[512,2048,32768,131072,786432],gb:[512,1024,2048,4096,8192,16384,32768,65536],gba:[512,8192,32768,65536,131072],gamegear:[512,1024,2048,4096,8192,16384,32768,65536],sms:[512,1024,2048,4096,8192,16384,32768,65536],genesis:[64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072],segacd:[8192,16384,32768,65536,131072,262144,524288]},n=Object.keys(r).reduce(((e,t)=>(e.push(...r[t]),e)),[]),i=[...new Set(n)].sort(((e,t)=>e-t));r.all=i,t["Z"]=r},4762:function(e,t,a){a.d(t,{Z:function(){return S}});var r=a(7327),n=(a(3408),a(4590),a(3462),a(3767),a(8585),a(8696),a(2137)),i=a(3313);const s=!1,o=[95,95,95,95,95,95,95,95,95,95,95,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,69,71,65,95,67,68,95,82,79,77,0,1,0,0,0,82,65,77,95,67,65,82,84,82,73,68,71,69,95,95,95],l=32,u=4,c=16,d=24,f=64,v=2,g=v+1,h=64,m=32;function y(e,t){const a=e.byteLength-h+t,r=new DataView(e),n=new Uint16Array(u);let i=a;for(let o=0;o<u;o+=1)n[o]=r.getUint16(i,s),i+=2;for(let s=0;s<u/2;s+=1){let e=0;for(let t=s+1;t<u;t+=1)n[s]===n[t]&&(e+=1);if(e>u/2)return n[s]}throw new Error(`Unable to find repeat code at offset from directory 0x${t.toString(16)}`)}function p(e,t,a){const r=e.byteLength-h+t,n=new DataView(e);let i=r;for(let o=0;o<u;o+=1)n.setUint16(i,a,s),i+=2}class S{static getActualSize(e){const t=new Uint8Array(e),a=n.Z.segacd.findIndex((e=>o.slice(l).every(((a,r)=>a===t[e-l+r]))));if(-1===a)throw new Error("This does not appear to be a Sega CD save file");return n.Z.segacd[a]}static isCorrectlyFormatted(e){try{S.getActualSize(e)}catch(t){return!1}return!0}static truncateToActualSize(e){return e.slice(0,S.getActualSize(e))}static makeEmptySave(e){const t=i.Z.getFilledArrayBuffer(e-o.length,0),a=new ArrayBuffer(o.length),r=new Uint8Array(a);o.forEach(((e,t)=>{r[t]=e}));const n=e/f-g;return S.setNumFreeBlocks(a,n),i.Z.concatArrayBuffers([t,a])}static getNumFiles(e){return y(e,d)}static getNumFreeBlocks(e){return y(e,c)}static setNumFiles(e,t){p(e,d,t)}static setNumFreeBlocks(e,t){p(e,c,t)}static getTotalAvailableBlocks(e){return Math.ceil(e.byteLength/f)-v}static resize(e,t){if(-1===n.Z.segacd.indexOf(t))throw new Error(`${t} bytes is not a valid size for a Sega CD save`);const a=S.truncateToActualSize(e);if(t===a.byteLength)return a;const r=S.getNumFiles(a),s=r%2===1?r+1:r,l=s*m,u=a.byteLength-o.length,c=u-l,d=a.slice(0,c),v=a.slice(c,c+l),g=a.slice(u),h=S.getNumFreeBlocks(a),y=(t-a.byteLength)/f,p=h+y;if(p<0){const e=a.byteLength/f,r=t/f;throw new Error(`Insufficient free blocks in file to change size from ${e} to ${r} blocks. Previous free blocks: ${h}`)}if(S.setNumFreeBlocks(g,p),t>a.byteLength){const e=i.Z.getFilledArrayBuffer(t-a.byteLength,0);return i.Z.concatArrayBuffers([d,e,v,g])}const b=a.byteLength-t,C=d.byteLength-b,F=d.slice(0,C),D=d.slice(C),w=new Uint8Array(D);return w.forEach((e=>{if(0!==e&&255!==e)throw new Error(`Cannot resize file down to ${t} bytes because it would remove a portion that contains game data`)})),i.Z.concatArrayBuffers([F,v,g])}}(0,r.Z)(S,"INTERNAL_SAVE_SIZE",8192)},7327:function(e,t,a){function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function n(e,t){if("object"!==r(e)||null===e)return e;var a=e[Symbol.toPrimitive];if(void 0!==a){var n=a.call(e,t||"default");if("object"!==r(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}function i(e){var t=n(e,"string");return"symbol"===r(t)?t:String(t)}function s(e,t,a){return t=i(t),t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}a.d(t,{Z:function(){return s}})}}]);